{"case_id": "yearn_v3_cases", "description": "Yearn V3 Vault Cases for various tokens", "steps": [{"description": "Approve USDC.e vault to spend USDC.e on Yearn V3", "to": "0xA013Fbd4b711f9ded6fB09C1c0d358E2FbC2EAA0", "value": "0", "function_name": "approve", "input_args": ["0xA013Fbd4b711f9ded6fB09C1c0d358E2FbC2EAA0", "amountBN"]}, {"description": "Deposit USDC.e to vault USDC.e-A on Yearn V3", "to": "0xA013Fbd4b711f9ded6fB09C1c0d358E2FbC2EAA0", "value": "0", "function_name": "deposit", "input_args": ["amountBN", "userAddress"]}, {"description": "Approve USDT vault to spend USDT on Yearn V3", "to": "0xBb287E6017d3DEb0e2E65061e8684eab21060123", "value": "0", "function_name": "approve", "input_args": ["0xBb287E6017d3DEb0e2E65061e8684eab21060123", "amountBN"]}, {"description": "Deposit USDT to vault USDT-A on Yearn V3", "to": "0xBb287E6017d3DEb0e2E65061e8684eab21060123", "value": "0", "function_name": "deposit", "input_args": ["amountBN", "userAddress"]}, {"description": "Approve DAI vault to spend DAI on Yearn V3", "to": "0x90b2f54C6aDDAD41b8f6c4fCCd555197BC0F773B", "value": "0", "function_name": "approve", "input_args": ["0x90b2f54C6aDDAD41b8f6c4fCCd555197BC0F773B", "amountBN"]}, {"description": "Deposit DAI to vault DAI-A on Yearn V3", "to": "0x90b2f54C6aDDAD41b8f6c4fCCd555197BC0F773B", "value": "0", "function_name": "deposit", "input_args": ["amountBN", "userAddress"]}, {"description": "Approve WETH vault to spend WETH on Yearn V3", "to": "0x305F25377d0a39091e99B975558b1bdfC3975654", "value": "0", "function_name": "approve", "input_args": ["0x305F25377d0a39091e99B975558b1bdfC3975654", "amountBN"]}, {"description": "Deposit WETH to vault WETH-A on Yearn V3", "to": "0x305F25377d0a39091e99B975558b1bdfC3975654", "value": "0", "function_name": "deposit", "input_args": ["amountBN", "userAddress"]}]}
{"case_id": "eigenpie_steth", "description": "Eigenpie staking case for stETH", "steps": [{"description": "Stake ETH to Lido", "to": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84", "value": "v", "function_name": "submit", "input_args": ["ReferalAccount"]}, {"description": "Approve stETH to Eigenpie", "to": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84", "value": "0", "function_name": "approve", "input_args": ["0x24db6717dB1C75B9Db6eA47164D8730B63875dB7", "estimateSTETHAmount"]}, {"description": "Stake stETH to Eigenpie", "to": "0x24db6717dB1C75B9Db6eA47164D8730B63875dB7", "value": "0", "function_name": "depositAsset", "input_args": ["0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84", "estimateSTETHAmount", "estimateMSTETHAmount", "ReferalAccount"]}]}
{"case_id": "ether_fi_arbitrum_bridge", "description": "Bridge ETH to Arbitrum using ether.fi", "steps": [{"description": "Stake ETH to ether.fi", "to": "0x308861A430be4cce5502d0A12724771Fc6DaF216", "value": "inputAmount", "function_name": "deposit", "input_args": [""]}, {"description": "Approve eETH to ether.fi", "to": "0x35fA164735182de50811E8e2E824cFb9B6118ac2", "value": "0", "function_name": "approve", "input_args": ["0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "eETHAmount"]}, {"description": "Wrap eETH into weETH", "to": "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "value": "0", "function_name": "wrap", "input_args": ["eETHAmount"]}, {"description": "Approve weETH to ether.fi", "to": "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "value": "0", "function_name": "approve", "input_args": ["0xa3A7B6F88361F48403514059F1F16C8E78d60EeC", "weETHAmount"]}, {"description": "Bridge weETH into Arbitrum One", "to": "0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef", "value": "gasLimit * maxFeePerGas + maxSubmissionCost", "function_name": "outboundTransfer", "input_args": ["0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "arbAddr", "amount", "gasLimit", "maxFeePerGas", "calldata"]}]}
{"case_id": "balancer_aura", "description": "A case for managing liquidity in Balancer and Aura pools on Arbitrum.", "steps": [{"description": "Fetch APY value from Aura's GraphQL API.", "to": "https://data.aura.finance/graphql", "value": "", "function_name": "getApyValue", "input_args": []}, {"description": "Swap ETH for USDC, DAI, USDT, and USDC.e tokens.", "to": "Various token addresses", "value": "", "function_name": "swapTx", "input_args": ["chainId", "userAddress", "srcTokenAddress", "srcTokenSymbol", "srcTokenDecimals", "srcAmount", "dstTokenAddress", "dstTokenSymbol", "dstTokenDecimals"]}, {"description": "Approve ERC20 tokens for Balancer vault.", "to": "Balancer Vault", "value": "", "function_name": "approveERC20TxIfNeeded", "input_args": ["chain", "userAddress", "tokenAddress", "tokenSymbol", "tokenDecimals", "spenderAddress", "spenderName", "amount"]}, {"description": "Join Balancer pool with the swapped tokens.", "to": "Balancer Pool", "value": "", "function_name": "joinPoolTx", "input_args": ["chain", "poolId", "userAddress", "request"]}, {"description": "Approve BPT for Aura.", "to": "Aura", "value": "", "function_name": "approveERC20TxIfNeeded", "input_args": ["chain", "userAddress", "tokenAddress", "tokenSymbol", "tokenDecimals", "spenderAddress", "spenderName", "amount"]}, {"description": "Deposit BPT into Aura pool.", "to": "Aura Pool", "value": "", "function_name": "depositTx", "input_args": ["chain", "poolId", "tokenDecimals", "tokenSymbol", "tokenAmount"]}]}
{"case_id": "arbitrum_to_polygon_yearn_v3_usdt", "description": "Bridge USDT from Arbitrum to Polygon and deposit to Yearn V3", "steps": [{"description": "Approve USDT for Stargate", "to": "0xcE8CcA271Ebc0533920C83d39F417ED6A0abB7D0", "value": "inputAmount", "function_name": "approveERC20TxIfNeeded", "input_args": ["context.chain", "userAddress", "TokenAddress.Arbitrum.USDT", "tokenSymbol", "tokenDecimals", "stargateAddresses.arbitrum.poolUsdt"]}, {"description": "Bridge USDT to Polygon", "to": "0xcE8CcA271Ebc0533920C83d39F417ED6A0abB7D0", "value": "inputAmount", "function_name": "bridgeTx", "input_args": ["context.chain", "tokenSymbol", "tokenDecimals", "context.chain.name", "destinationChain.name", "stargateAddresses.arbitrum.poolUsdt", "userAddress", "predefinedConfigs.mainnet.polygon.composer", "inputAmount", "dstEid", "BridgeMode.taxi", "sendParam.composeMsg", "estimateGasLimit"]}, {"description": "Deposit USDT to Yearn V3", "to": "0xBb287E6017d3DEb0e2E65061e8684eab21060123", "value": "nextInput", "function_name": "caseApproveAndDepositYearnV3USDT", "input_args": ["nextContext"]}]}
{"case_id": "gamma_yearn", "description": "Gamma Yearn Case for investing in aUSDC-WETH through WETH and USDC.e swaps and deposits.", "steps": [{"description": "Get APY value for Gamma LP Compounder", "to": "", "value": "", "function_name": "getApyValue", "input_args": []}, {"description": "Check user address", "to": "", "value": "", "function_name": "AddressNotFoundError", "input_args": []}, {"description": "Parse WETH amount from inputs", "to": "", "value": "", "function_name": "parseUnits", "input_args": ["inputs[0]", "18"]}, {"description": "Get WETH decimals", "to": "", "value": "", "function_name": "getDecimals", "input_args": ["wethAddr", "context.chain"]}, {"description": "Get USDC.e decimals", "to": "", "value": "", "function_name": "getDecimals", "input_args": ["usdceAddr", "context.chain"]}, {"description": "Calculate trial USDC.e amount needed for deposit", "to": "", "value": "", "function_name": "gamma.getDepositAmount", "input_args": ["context.chain", "uniProxyAddr", "lpTokenAddr", "wethAddr", "wethAmount"]}, {"description": "Get source token amount for swap", "to": "", "value": "", "function_name": "oneInch.getSrcTokenAmount", "input_args": ["context.chain.id", "wethAddr", "trialUsdceAmount", "usdceAddr", "0.005"]}, {"description": "Calculate WETH investment amount", "to": "", "value": "", "function_name": "", "input_args": ["(wethAmount * wethAmount) / (srcTokenAmount + wethAmount)"]}, {"description": "Calculate USDC.e investment amount in WETH", "to": "", "value": "", "function_name": "", "input_args": ["wethAmount - wethInvestAmount"]}, {"description": "Swap WETH to USDC.e", "to": "oneInch.swapTx", "value": "", "function_name": "", "input_args": ["context.chain.id", "userAddress", "wethAddr", "wethSymbol", "wethDecimals", "usdceInvestAmountInWETH", "usdceAddr", "usdceSymbol", "usdceDecimals"]}, {"description": "Check if USDC.e amount is sufficient", "to": "", "value": "", "function_name": "", "input_args": ["usdceAmountNeeded > usdceAmount"]}, {"description": "Approve WETH for swap", "to": "approveERC20TxIfNeeded", "value": "", "function_name": "", "input_args": ["context.chain", "userAddress", "wethAddr", "wethSymbol", "wethDecimals", "swapWETHToUsdce.to", "oneInchRouterName", "wethAmount"]}, {"description": "Push approve WETH transaction if exists", "to": "", "value": "", "function_name": "", "input_args": ["approveWethTx"]}, {"description": "Approve USDC.e for Gamma vault", "to": "approveERC20TxIfNeeded", "value": "", "function_name": "", "input_args": ["context.chain", "userAddress", "usdceAddr", "usdceSymbol", "usdceDecimals", "vaultAddr", "gammaVaultName", "usdceAmountNeeded"]}, {"description": "Push approve USDC.e transaction if exists", "to": "", "value": "", "function_name": "", "input_args": ["approveUsdceTx"]}, {"description": "Approve WETH for Gamma vault", "to": "approveERC20TxIfNeeded", "value": "", "function_name": "", "input_args": ["context.chain", "userAddress", "wethAddr", "wethSymbol", "wethDecimals", "vaultAddr", "gammaVaultName", "wethInvestAmount"]}, {"description": "Push approve WETH for Gamma transaction if exists", "to": "", "value": "", "function_name": "", "input_args": ["approveWethGammaTx"]}, {"description": "Deposit into Gamma vault", "to": "gamma.depositTx", "value": "", "function_name": "", "input_args": ["context.chain", "uniProxyAddr", "userAddress", "lpTokenAddr", "{symbol: usdceSymbol, address: usdceAddr, amount: usdceAmountNeeded}", "{symbol: wethSymbol, address: wethAddr, amount: wethInvestAmount}"]}, {"description": "Push Gamma deposit transaction", "to": "", "value": "", "function_name": "", "input_args": ["gammaTx"]}, {"description": "Approve LP token for Yearn vault", "to": "approveERC20TxIfNeeded", "value": "", "function_name": "", "input_args": ["context.chain", "userAddress", "vaultAddr", "lpTokenSymbol", "sharesDecimals", "gammaLPCompounderAddr", "yearnVaultName", "safeShares"]}, {"description": "Push LP token approval transaction if exists", "to": "", "value": "", "function_name": "", "input_args": ["approveGammaLpToken"]}, {"description": "Deposit LP token into Yearn vault", "to": "yearn.depositTx", "value": "", "function_name": "", "input_args": ["context.chain", "lpTokenSymbol", "gammaLPCompounderAddr", "safeShares", "userAddress"]}, {"description": "Push Yearn deposit transaction", "to": "", "value": "", "function_name": "", "input_args": ["yearnTx"]}]}
{"case_id": "gmx_delta_neutral_strategy", "description": "A strategy for creating a short order using ETH on GMX.", "steps": [{"description": "Create short order using ETH on GMX", "to": "exchangeRouterAddr", "value": "0", "function_name": "createShortOrderTx", "input_args": ["chain", "userAddr", "inputAmount"]}]}
{"case_id": "pendle_usde", "description": "Pendle USDe liquidity provision case", "steps": [{"description": "Preview swap transaction from ETH to USDe", "to": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "value": "0", "function_name": "swapPreviewTx", "input_args": ["chainId: arbitrum.id", "srcTokenSymbol: 'ETH'", "dstTokenSymbol: 'USDe'"]}, {"description": "Approve USDe for Pendle", "to": "0xb3c24d9dccc2ec5f778742389ffe448e295b84e0", "value": "0", "function_name": "approve", "input_args": ["pendleTxInfo.routerAddress", "estimateUsdeAmount"]}, {"description": "Provide liquidity to PT/SY pool on Pendle", "to": "0x888888888889758F76e7103c6CbF23ABbF58F946", "value": "estimateUsdeAmount", "function_name": "addLiquiditySingleTokenData", "input_args": ["chain: context.chain", "receiverAddr: userAddress", "marketAddr: pendleUsdeMarketAddr", "tokenInAddr: usdeTokenAddr", "amountTokenIn: estimateUsdeAmount", "slippage: 0.002"]}]}
{"case_id": "pendle_weETH", "description": "Liquidity provision for weETH on Pendle", "steps": [{"description": "Get market address for Pendle weETH", "to": "", "value": "", "function_name": "getMarketAddr", "input_args": ["{\"chainId\":\"42161\",\"syTokenAddr\":\"0xa6C895EB332E91c5b3D00B7baeEAae478cc502DA\"}"]}, {"description": "Calculate APY for Pendle weETH market", "to": "", "value": "", "function_name": "getApy", "input_args": ["{\"chain\":\"arbitrum\",\"marketAddress\":\"<pendleWeETHMarketAddr>\"}"]}, {"description": "Add liquidity to Pendle market", "to": "<pendleEETHMarketAddr>", "value": "<inputAmount>", "function_name": "addLiquiditySingleTokenData", "input_args": ["{\"chain\":\"<context.chain>\",\"receiverAddr\":\"<userAddress>\",\"marketAddr\":\"<pendleEETHMarketAddr>\",\"tokenInAddr\":\"0x35751007a407ca6FEFfE80b3cB397736D2cf4dbe\",\"amountTokenIn\":\"<inputAmount>\",\"slippage\":0.002}"]}, {"description": "Approve ERC20 token for spending", "to": "", "value": "", "function_name": "approveERC20TxIfNeeded", "input_args": ["{\"chain\":\"<context.chain>\",\"userAddress\":\"<userAddress>\",\"tokenAddress\":\"0x35751007a407ca6FEFfE80b3cB397736D2cf4dbe\",\"tokenSymbol\":\"weETH\",\"tokenDecimals\":\"<weETHDecimals>\",\"spenderAddress\":\"<depositTxInfo.routerAddress>\",\"spenderName\":\"Pendle\",\"amount\":\"<inputAmount>\"}"]}]}
{"case_id": "gauntlet_dai_core", "description": "Gauntlet DAI Core case for staking DAI in the Morpho vault.", "steps": [{"description": "Transfer DAI to the Ethereum Bundler", "to": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE", "value": "inputAmount", "function_name": "transferTx", "input_args": ["userAddress", "ethereumBundlerV2", "inputTokenSymbol", "inputTokenAddr", "inputAmount", "daiDecimals"]}, {"description": "Deposit DAI into the Morpho vault", "to": "0x500331c9fF24D9d11aee6B07734Aa72343EA74a5", "value": "inputAmount", "function_name": "wrapToMulticallTx", "input_args": ["depositCallData", "0n", "inputToken", "vaultName"]}]}
{"case_id": "morpho_gauntlet_weth_prime", "description": "Gauntlet WETH Prime staking case", "steps": [{"description": "Get APY value for the vault", "to": "morphoVault", "value": "0", "function_name": "getAPY", "input_args": ["morphoVault"]}, {"description": "Calculate token amount after fee", "to": "userAddress", "value": "inputAmount", "function_name": "tokenAmountAfterFee", "input_args": ["context.chain", "inputToken", "platformFeeNative"]}, {"description": "Deposit ETH using multicall transaction", "to": "morphoVault", "value": "inputAmount", "function_name": "depositEthMulticallTx", "input_args": ["context.chain", "inputAmount", "morphoVault", "vaultName", "userAddress"]}, {"description": "Preview transaction for deposit", "to": "morphoVault", "value": "0", "function_name": "depositPreviewTx", "input_args": ["inputTokenSymbol", "vaultName"]}]}
{"case_id": "morpho_leadblock_usdc_rwa", "description": "LeadBlock USDC RWA case for staking USDC in Morpho vault.", "steps": [{"description": "Transfer USDC to Ethereum Bundler V2", "to": "ethereumBundlerV2", "value": "inputAmount", "function_name": "transferTx", "input_args": ["userAddress", "ethereumBundlerV2", "inputTokenSymbol", "inputTokenAddr", "inputAmount", "usdcDecimals"]}, {"description": "Deposit USDC into Morpho vault", "to": "morphoVault", "value": "inputAmount", "function_name": "wrapToMulticallTx", "input_args": ["calldatas", "0n", "inputToken", "vaultName"]}]}
{"case_id": "morpho_re7_usdt", "description": "Re7 USDT staking case on Morpho platform.", "steps": [{"description": "Transfer USDT to Ethereum Bundler V2", "to": "ethereumBundlerV2", "value": "inputAmount", "function_name": "transferTx", "input_args": ["userAddress", "ethereumBundlerV2", "inputTokenSymbol", "inputTokenAddr", "inputAmount", "usdtDecimals"]}, {"description": "Deposit USDT into Morpho Vault", "to": "morphoVault", "value": "inputAmount", "function_name": "wrapToMulticallTx", "input_args": ["depositCallData", "0n", "inputTokenSymbol", "inputAmount", "usdtDecimals", "vaultName"]}]}
{"case_id": "morpho_re7_weth", "description": "Case for managing WETH deposits in Morpho vault.", "steps": [{"description": "Get APY value for the Morpho vault.", "to": "morphoVault", "value": "", "function_name": "getAPY", "input_args": ["morphoVault"]}, {"description": "Calculate the input amount after platform fee.", "to": "morphoVault", "value": "", "function_name": "tokenAmountAfterFee", "input_args": ["context.chain", "inputToken", "platformFeeNative"]}, {"description": "Create a multicall transaction to deposit ETH into the Morpho vault.", "to": "morphoVault", "value": "", "function_name": "depositEthMulticallTx", "input_args": ["context.chain", "inputAmount", "morphoVault", "vaultName", "userAddress"]}, {"description": "Preview the deposit transaction.", "to": "morphoVault", "value": "", "function_name": "depositPreviewTx", "input_args": ["inputTokenSymbol", "vaultName"]}]}
{"case_id": "gauntlet_usdt_prime", "description": "Gauntlet USDT Prime staking case", "steps": [{"description": "Transfer USDT to the Ethereum Bundler", "to": "ethereumBundlerV2", "value": "inputAmount", "function_name": "transferTx", "input_args": ["userAddress", "receiver", "tokenSymbol", "tokenAddress", "tokenAmount", "tokenDecimals"]}, {"description": "Deposit USDT into the Morpho Vault", "to": "morphoVault", "value": "inputAmount", "function_name": "wrapToMulticallTx", "input_args": ["calldatas", "ethValue", "inputToken", "vaultName"]}]}
{"case_id": "merlin_solvBTC_avalon", "description": "A structured case for the Merlin SolvBTC Avalon transaction process.", "steps": [{"description": "Wrap BTC", "to": "MerlinSwapAddr", "value": "btcAmount", "function_name": "wrapBTC", "input_args": ["btcAmount"]}, {"description": "Approve WBTC for MerlinSwap", "to": "MerlinSwapAddr", "value": "btcAmount", "function_name": "approveERC20Tx", "input_args": ["WBTCAddr", "WBTC", "18", "MerlinSwapAddr", "MerlinSwap", "btcAmount"]}, {"description": "Swap WBTC to M-BTC", "to": "MBTCAddr", "value": "swapAmount", "function_name": "swapTx", "input_args": ["userAddress", "WBTCAddr", "WBTC", "18", "btcAmount", "MBTCAddr", "M-BTC", "18", "0.015"]}, {"description": "Approve M-BTC for SolvBTC", "to": "SolvBTCAddr", "value": "swapAmount", "function_name": "approveERC20Tx", "input_args": ["MBTCAddr", "M-BTC", "18", "SolvBTCAddr", "SolvBTC", "swapAmount"]}, {"description": "Stake M-BTC to SolvBTC", "to": "SolvBTCAddr", "value": "swapAmount", "function_name": "solvBTCTx", "input_args": ["swapAmount"]}, {"description": "Approve SolvBTC for Avalon", "to": "AvalonPoolAddr", "value": "swapAmount", "function_name": "approveERC20Tx", "input_args": ["SolvBTCToken", "SolvBTC", "18", "AvalonPoolAddr", "Avalon", "swapAmount"]}, {"description": "Supply SolvBTC to Avalon", "to": "AvalonPoolAddr", "value": "swapAmount", "function_name": "avalonSupplyTx", "input_args": ["userAddress", "SolvBTCToken", "swapAmount"]}]}
{"case_id": "scroll_airdrop_hunting_rookie", "description": "A case for executing a series of transactions on the Scroll chain for airdrop hunting.", "steps": [{"description": "Approve USDC to Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "0", "function_name": "approveUSDCToAmbient", "input_args": ["inputUSDCAmount"]}, {"description": "Swap USDC to ETH on Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "0", "function_name": "swapUSDCToETHByAmbient", "input_args": ["inputUSDCAmount"]}, {"description": "Wrap ETH to WETH", "to": "0x5300000000000000000000000000000000000004", "value": "ethMinOut", "function_name": "wrapETH", "input_args": ["ethMinOut"]}, {"description": "Unwrap WETH to ETH", "to": "0x5300000000000000000000000000000000000004", "value": "ethMinOut", "function_name": "unwrapETH", "input_args": ["ethMinOut"]}, {"description": "Swap ETH to USDC on Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "0", "function_name": "swapETHToUSDCByAmbient", "input_args": ["ethMinOut"]}]}
{"case_id": "scroll_airdrop_hunting_with_penpad", "description": "Airdrop hunting strategy using Penpad and various swaps on Scroll.", "steps": [{"description": "Swap ETH to USDC using Syncswap", "to": "0x80e38291e06339d10AAB483C65695D004dBD5C69", "value": "<amount>", "function_name": "swap", "input_args": ["<paths>", "<amountOutMin>", "<deadline>"]}, {"description": "Approve USDC for KyberSwap", "to": "0x0000000000000000000000000000000000000000", "value": "0", "function_name": "approve", "input_args": ["0x6131B5fae19EA4f9D964eAc0408E4408b66337b5", "<amount>"]}, {"description": "Swap USDC to ETH on KyberSwap", "to": "0x6131B5fae19EA4f9D964eAc0408E4408b66337b5", "value": "0", "function_name": "swap", "input_args": ["<routeData>"]}, {"description": "Approve USDC for SpaceFi", "to": "0x0000000000000000000000000000000000000000", "value": "0", "function_name": "approve", "input_args": ["0x18b71386418A9FCa5Ae7165E31c385a5130011b6", "<amount>"]}, {"description": "Swap USDC to ETH using SpaceFi", "to": "0x18b71386418A9FCa5Ae7165E31c385a5130011b6", "value": "0", "function_name": "swapExactTokensForETH", "input_args": ["<amountIn>", "<amountOutMin>", "[usdcAddress, wETHAddress]", "<userAddress>", "<deadline>"]}, {"description": "Deposit ETH to Penpad", "to": "0x8F53fA7928305Fd4f78c12BA9d9DE6B2420A2188", "value": "<amount>", "function_name": "stake", "input_args": []}, {"description": "Check Points on Penpad", "to": "https://penpad.io/staking", "value": "0", "function_name": "checkPoints", "input_args": []}]}
{"case_id": "scroll_airdrop_hunting_professional", "description": "A structured case for managing USDC, DAI, and USDT transactions on the Scroll chain with Cog Finance.", "steps": [{"description": "Approve USDC to Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "0", "function_name": "approveUSDCToAmbient", "input_args": ["inputUSDCAmount"]}, {"description": "Swap USDC to ETH on Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "0", "function_name": "swapUSDCToETHByAmbient", "input_args": ["inputUSDCAmount"]}, {"description": "Wrap ETH to WETH", "to": "0x5300000000000000000000000000000000000004", "value": "ethMinOut", "function_name": "wrapETH", "input_args": ["ethMinOut"]}, {"description": "Approve WETH to Cog Finance", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "approveWETHToCogPairUSDCWETH", "input_args": ["ethMinOut"]}, {"description": "Add WETH as collateral to Cog Finance", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "ethMinOut", "function_name": "addWETHToCogUSDCWETHCollateral", "input_args": ["userAddress", "ethMinOut"]}, {"description": "Borrow USDC from Cog Finance", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "usdcBorrowAmount", "function_name": "borrowUSDCFromCog", "input_args": ["client", "userAddress", "usdcBorrowAmount"]}, {"description": "Approve USDC to Cog Finance", "to": "0xcA77eB3fEFe3725Dc33bccB54eDEFc3D9f764f97", "value": "0", "function_name": "approveUSDCToCogPairUSDCWETH", "input_args": ["(usdcBorrowAmount * BigInt(1001)) / BigInt(1000)"]}, {"description": "Repay USDC to Cog Finance", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "repayUSDCAmount", "function_name": "repayUSDCToCog", "input_args": ["repayUSDCAmount"]}, {"description": "Remove WETH Collateral (USDC) from Cog Finance", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "withdrawWETHAmountFromUSDCWETH", "function_name": "removeUSDCWETHCollateralFromCog", "input_args": ["withdrawWETHAmountFromUSDCWETH", "userAddress"]}, {"description": "Approve WETH to Cog Finance", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "approveWETHToCogPairDAIWETH", "input_args": ["withdrawWETHAmountFromUSDCWETH"]}, {"description": "Add WETH as collateral to Cog Finance", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "withdrawWETHAmountFromUSDCWETH", "function_name": "addWETHToCogDAIWETHCollateral", "input_args": ["userAddress", "withdrawWETHAmountFromUSDCWETH"]}, {"description": "Borrow DAI from Cog Finance", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "daiBorrowAmount", "function_name": "borrowDAIFromCog", "input_args": ["client", "userAddress", "daiBorrowAmount"]}, {"description": "Approve DAI to Cog Finance", "to": "0xcA77eB3fEFe3725Dc33bccB54eDEFc3D9f764f97", "value": "0", "function_name": "approveDAIToCogPairDAIWETH", "input_args": ["daiBorrowAmount"]}, {"description": "Repay DAI to Cog Finance", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "repayDAIAmount", "function_name": "repayDAIToCog", "input_args": ["repayDAIAmount"]}, {"description": "Remove WETH Collateral (DAI) from Cog Finance", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "withdrawWETHAmountFromDAIWETH", "function_name": "removeDAIWETHCollateralFromCog", "input_args": ["withdrawWETHAmountFromDAIWETH", "userAddress"]}, {"description": "Approve WETH to Cog Finance", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "approveWETHToCogPairUSDTWETH", "input_args": ["withdrawWETHAmountFromDAIWETH"]}, {"description": "Add WETH as collateral to Cog Finance", "to": "0x4Ac126e5dd1Cd496203a7E703495cAa8112A20cA", "value": "withdrawWETHAmountFromDAIWETH", "function_name": "addWETHToCogUSDTWETHCollateral", "input_args": ["userAddress", "withdrawWETHAmountFromDAIWETH"]}, {"description": "Borrow USDT from Cog Finance", "to": "0x4Ac126e5dd1Cd496203a7E703495cAa8112A20cA", "value": "usdtBorrowAmount", "function_name": "borrowUSDTFromCog", "input_args": ["client", "userAddress", "usdtBorrowAmount"]}, {"description": "Approve USDT to Cog Finance", "to": "0xf55BEC9cafDbE8730f096Aa55dad6D22d44099Df", "value": "0", "function_name": "approveUSDTToCogPairUSDTWETH", "input_args": ["usdtBorrowAmount"]}, {"description": "Repay USDT to Cog Finance", "to": "0x4Ac126e5dd1Cd496203a7E703495cAa8112A20cA", "value": "repayUSDTAmount", "function_name": "repayUSDTToCog", "input_args": ["repayUSDTAmount"]}, {"description": "Remove WETH Collateral (USDT) from Cog Finance", "to": "0x4Ac126e5dd1Cd496203a7E703495cAa8112A20cA", "value": "withdrawWETHAmountFromUSDTWETH", "function_name": "removeUSDTWETHCollateralFromCog", "input_args": ["withdrawWETHAmountFromUSDTWETH", "userAddress"]}, {"description": "Unwrap WETH to ETH", "to": "0x5300000000000000000000000000000000000004", "value": "withdrawWETHAmountFromUSDTWETH", "function_name": "unwrapETH", "input_args": ["withdrawWETHAmountFromUSDTWETH"]}, {"description": "Swap ETH to USDC on Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "withdrawWETHAmountFromUSDTWETH", "function_name": "swapETHToUSDCByAmbient", "input_args": ["withdrawWETHAmountFromUSDTWETH"]}]}
{"case_id": "scroll_airdrop_hunting_advanced", "description": "Advanced airdrop hunting strategy on Scroll chain involving multiple transactions for swapping, wrapping, lending, and borrowing.", "steps": [{"description": "Approve USDC to Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "0", "function_name": "approveUSDCToAmbient", "input_args": ["inputUSDCAmount"]}, {"description": "Swap USDC to ETH on Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "inputUSDCAmount", "function_name": "swapUSDCToETHByAmbient", "input_args": ["inputUSDCAmount"]}, {"description": "Wrap ETH to WETH", "to": "0x5300000000000000000000000000000000000004", "value": "ethMinOut", "function_name": "wrapETH", "input_args": ["ethMinOut"]}, {"description": "Approve WETH to Cog Finance", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "approveWETHToCogPairUSDCWETH", "input_args": ["ethMinOut"]}, {"description": "Add WETH as collateral to Cog Finance", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "ethMinOut", "function_name": "addWETHToCogUSDCWETHCollateral", "input_args": ["userAddress", "ethMinOut"]}, {"description": "Borrow USDC from Cog Finance", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "usdcBorrowAmount", "function_name": "borrowUSDCFromCog", "input_args": ["client", "userAddress", "usdcBorrowAmount"]}, {"description": "Approve USDC to Cog Finance", "to": "0xcA77eB3fEFe3725Dc33bccB54eDEFc3D9f764f97", "value": "0", "function_name": "approveUSDCToCogPairUSDCWETH", "input_args": ["(usdcBorrowAmount * BigInt(1001)) / BigInt(1000)"]}, {"description": "Repay USDC to Cog Finance", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "repayUSDCAmount", "function_name": "repayUSDCToCog", "input_args": ["repayUSDCAmount"]}, {"description": "Remove WETH Collateral (USDC) from Cog Finance", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "withdrawWETHAmountFromUSDCWETH", "function_name": "removeUSDCWETHCollateralFromCog", "input_args": ["withdrawWETHAmountFromUSDCWETH", "userAddress"]}, {"description": "Approve WETH to Cog Finance", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "approveWETHToCogPairDAIWETH", "input_args": ["withdrawWETHAmountFromUSDCWETH"]}, {"description": "Add WETH as collateral to Cog Finance", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "withdrawWETHAmountFromUSDCWETH", "function_name": "addWETHToCogDAIWETHCollateral", "input_args": ["userAddress", "withdrawWETHAmountFromUSDCWETH"]}, {"description": "Borrow DAI from Cog Finance", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "daiBorrowAmount", "function_name": "borrowDAIFromCog", "input_args": ["client", "userAddress", "daiBorrowAmount"]}, {"description": "Approve DAI to Cog Finance", "to": "0xcA77eB3fEFe3725Dc33bccB54eDEFc3D9f764f97", "value": "0", "function_name": "approveDAIToCogPairDAIWETH", "input_args": ["daiBorrowAmount"]}, {"description": "Repay DAI to Cog Finance", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "repayDAIAmount", "function_name": "repayDAIToCog", "input_args": ["repayDAIAmount"]}, {"description": "Remove WETH Collateral (DAI) from Cog Finance", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "withdrawWETHAmountFromDAIWETH", "function_name": "removeDAIWETHCollateralFromCog", "input_args": ["withdrawWETHAmountFromDAIWETH", "userAddress"]}, {"description": "Unwrap WETH to ETH", "to": "0x5300000000000000000000000000000000000004", "value": "withdrawWETHAmountFromDAIWETH", "function_name": "unwrapETH", "input_args": ["withdrawWETHAmountFromDAIWETH"]}, {"description": "Swap ETH to USDC on Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "withdrawWETHAmountFromDAIWETH", "function_name": "swapETHToUSDCByAmbient", "input_args": ["withdrawWETHAmountFromDAIWETH"]}]}
{"case_id": "merlin_solvBTC_mage", "description": "A case for wrapping BTC, swapping to WBTC, and staking to Mage and SolvBTC.", "steps": [{"description": "Wrap BTC", "to": "MerlinSwapAddr", "value": "btcAmount", "function_name": "wrapBTC", "input_args": ["btcAmount"]}, {"description": "Approve WBTC for MerlinSwap", "to": "MerlinSwapAddr", "value": "btcAmount", "function_name": "approveERC20Tx", "input_args": ["WBTCAddr", "WBTC", "18", "MerlinSwapAddr", "MerlinSwap", "btcAmount"]}, {"description": "Swap WBTC to M-BTC", "to": "MBTCAddr", "value": "swapAmount", "function_name": "swapTx", "input_args": ["userAddress", "WBTCAddr", "WBTC", "18", "btcAmount", "MBTCAddr", "M-BTC", "18", "0.015"]}, {"description": "Approve M-BTC for SolvBTC", "to": "SolvBTCAddr", "value": "swapAmount", "function_name": "approveERC20Tx", "input_args": ["MBTCAddr", "M-BTC", "18", "SolvBTCAddr", "SolvBTC", "swapAmount"]}, {"description": "Stake M-BTC to SolvBTC", "to": "SolvBTCAddr", "value": "swapAmount", "function_name": "solvBTCTx", "input_args": ["swapAmount"]}, {"description": "Approve SolvBTC for Mage", "to": "MageSolvBTCAddr", "value": "swapAmount", "function_name": "approveERC20Tx", "input_args": ["SolvBTCToken", "SolvBTC", "18", "MageSolvBTCAddr", "Mage", "swapAmount"]}, {"description": "Stake SolvBTC to Mage", "to": "MageSolvBTCAddr", "value": "swapAmount", "function_name": "mageSolvBTCTx", "input_args": ["swapAmount"]}]}
{"case_id": "pendle_points", "description": "Pendle Points Case for swapping ETH to YT tokens", "steps": [{"description": "Swap ETH to YT rsETH", "to": "0x4186BFC76E2E237523CBC30FD220FE055156b41F", "value": "amount of ETH", "function_name": "swapExactToken", "input_args": ["ETH", "YT rsETH"]}, {"description": "Swap ETH to YT ezETH", "to": "0x2416092f143378750bb29b79eD961ab195CcEea5", "value": "amount of ETH", "function_name": "swapExactToken", "input_args": ["ETH", "YT ezETH"]}]}
{"case_id": "yearn_withdrawal", "description": "Yearn withdrawal case for various tokens.", "steps": [{"description": "Withdraw yvDAI-A to DAI from Yearn", "to": "0x90b2f54C6aDDAD41b8f6c4fCCd555197BC0F773B", "value": "0", "function_name": "redeem", "input_args": ["fromAmount", "context.account.address", "context.account.address", "1"]}, {"description": "Withdraw yvUSDC-A to USDC.e from Yearn", "to": "0xA013Fbd4b711f9ded6fB09C1c0d358E2FbC2EAA0", "value": "0", "function_name": "redeem", "input_args": ["fromAmount", "context.account.address", "context.account.address", "1"]}, {"description": "Withdraw yvUSDT-A to USDT from Yearn", "to": "0xBb287E6017d3DEb0e2E65061e8684eab21060123", "value": "0", "function_name": "redeem", "input_args": ["fromAmount", "context.account.address", "context.account.address", "1"]}, {"description": "Withdraw yvWETH-A to WETH from Yearn", "to": "0x305F25377d0a39091e99B975558b1bdfC3975654", "value": "0", "function_name": "redeem", "input_args": ["fromAmount", "context.account.address", "context.account.address", "1"]}]}
{"case_id": "bridge_eth_ethereum_optimism", "description": "Bridge ETH from Ethereum to Optimism", "steps": [{"description": "Prepare transaction for bridging ETH from Ethereum to Optimism", "to": "0x77b2043768d28E9C9aB44E1aBfC95944bcE57931", "value": "0", "function_name": "bridgeTx", "input_args": ["mainnet", "ETH", "18", "Ethereum", "Optimism", "0x77b2043768d28E9C9aB44E1aBfC95944bcE57931", "userAddress", "toAddr", "amount", "30111", "bus"]}]}
{"case_id": "zircuit_rsweth", "description": "Zircuit RSWETH staking case", "steps": [{"description": "Wrap ETH to rswETH", "to": "0xFAe103DC9cf190eD75350761e95403b7b8aFa6c0", "value": "<ETH Amount>", "function_name": "depositWithReferral", "input_args": ["ReferalAccount"]}, {"description": "Approve rswETH to Zircuit", "to": "0xFAe103DC9cf190eD75350761e95403b7b8aFa6c0", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "<Estimated RSWETH Amount>"]}, {"description": "Deposit rswETH to Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0xFAe103DC9cf190eD75350761e95403b7b8aFa6c0", "<Account Address>", "<Estimated RSWETH Amount>"]}]}
{"case_id": "etf_ethereum_top10", "description": "Swap USDT to Top 10 Ethereum tokens using 1inch", "steps": [{"description": "Fetch CMC data for top 10 ERC20 tokens by market cap", "to": "", "value": "", "function_name": "fetchCMCByMarketCap", "input_args": []}, {"description": "Fill in the decimals for the top 10 tokens", "to": "", "value": "", "function_name": "fillDecimals", "input_args": ["context.chain", "top10tokensNoDecmals"]}, {"description": "Check allowance for USDT token", "to": "", "value": "", "function_name": "allowance", "input_args": ["context.chain", "userAddress", "USDTAddr", "oneInchAddress"]}, {"description": "Approve USDT token if allowance is insufficient", "to": "oneInchAddress", "value": "0", "function_name": "approveERC20Tx", "input_args": ["USDTAddr", "USDT", "6", "oneInchAddress", "1Inch", "0"]}, {"description": "Approve USDT token for 1inch", "to": "oneInchAddress", "value": "usdtAmount", "function_name": "approveERC20Tx", "input_args": ["USDTAddr", "USDT", "6", "oneInchAddress", "1Inch", "usdtAmount"]}, {"description": "Swap USDT for each of the top 10 tokens", "to": "", "value": "", "function_name": "swapTx", "input_args": ["1", "userAddress", "USDTAddr", "USDT", "6", "usdtUsage", "token.address", "token.symbol", "token.decimals"]}]}
{"case_id": "renzo_pendle_airpuff", "description": "A case for staking ETH to ezETH on Renzo and then swapping to PT-ezETH on Pendle, followed by depositing into AirPuff.", "steps": [{"description": "Stake ETH to ezETH on Renzo", "to": "0x74a09653A083691711cF8215a6ab074BB4e99ef5", "value": "ethInputAmount", "function_name": "depositETH", "input_args": ["referralId"]}, {"description": "Approve ezETH to Pendle", "to": "0xbf5495Efe5DB9ce00f80364C8B423567e58d2110", "value": "0", "function_name": "approve", "input_args": ["txInfo.routerAddress", "ezEthAmount"]}, {"description": "Swap ezETH to PT-ezETH on Pendle", "to": "0x888888888889758F76e7103c6CbF23ABbF58F946", "value": "0", "function_name": "swapExactToken", "input_args": ["pendleOutput", "pendleContext"]}, {"description": "Approve PT-ezETH to AirPuff", "to": "0xf7906F274c174A52d444175729E3fa98f9bde285", "value": "0", "function_name": "approve", "input_args": ["airPuffPoolAddr", "ptAmount"]}, {"description": "Deposit PT-ezETH to AirPuff", "to": "0xebdaDFC590393938b601a9738C3107460838e880", "value": "0", "function_name": "openPosition", "input_args": ["ptAmount"]}]}
{"case_id": "ethena_usdt", "description": "Ethena USDT case for staking and swapping tokens.", "steps": [{"description": "Approve USDT to Uniswap", "to": "0xDac17F958D2ee523a2206206994597c13D831ec7", "value": "0", "function_name": "approve", "input_args": ["0xE592427A0AEce92De3Edee1F18E0157C05861564", "amount"]}, {"description": "Swap USDT to USDe", "to": "0xE592427A0AEce92De3Edee1F18E0157C05861564", "value": "0", "function_name": "exactInputSingle", "input_args": ["[\"0xDac17F958D2ee523a2206206994597c13D831ec7\",\"0x4c9edd5852cd905f086c759e8383e09bff1e68b3\",\"100\",\"amountIn\",\"0\"]"]}, {"description": "Approve USDe to lock on Ethena", "to": "0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "value": "0", "function_name": "approve", "input_args": ["0x8707f238936c12c309bfc2B9959C35828AcFc512", "amount"]}, {"description": "Stake USDe on Ethena", "to": "0x8707f238936c12c309bfc2B9959C35828AcFc512", "value": "0", "function_name": "stake", "input_args": ["0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "amount"]}]}
{"case_id": "lido_multiplier_withdraw", "description": "Withdraw and repay debt using wstETH collateral on AAVE.", "steps": [{"description": "Check allowance for wstETH on 1inch", "to": "1inch", "value": "0", "function_name": "allowance", "input_args": ["chain", "userAddress", "wstETHAddr", "oneInchAddress"]}, {"description": "Approve wstETH for 1inch if allowance is insufficient", "to": "1inch", "value": "inputAmount", "function_name": "approveERC20Tx", "input_args": ["wstETHAddr", "wstETH", "18", "oneInchAddress", "1inch", "inputAmount"]}, {"description": "Withdraw wstETH collateral from AAVE", "to": "userAddress", "value": "withdrawAmount", "function_name": "withdrawTx", "input_args": ["wstETHAddr", "wstETH", "withdrawAmount", "userAddress"]}, {"description": "Swap wstETH to ETH", "to": "1inch", "value": "withdrawAmount", "function_name": "swapTx", "input_args": ["1", "userAddress", "wstETHAddr", "wstETH", "18", "withdrawAmount", "ETHAddress", "ETH", "18", "1"]}, {"description": "Repay ETH debt", "to": "userAddress", "value": "repayAmount", "function_name": "repayETHTx", "input_args": ["repayAmount", "userAddress"]}, {"description": "Check and approve wstETH for 1inch if needed", "to": "1inch", "value": "approveSum", "function_name": "checkOrApporve1inchWSTETHTx", "input_args": ["chain", "userAddress", "approveSum"]}]}
{"case_id": "aerodrome_degen_liquidity", "description": "Liquidity provision for Aerodrome using DEGEN and WETH.", "steps": [{"description": "Swap ETH to DEGEN", "to": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "value": "ethAmountToSwap", "function_name": "swapTx", "input_args": ["chainId", "userAddress", "srcTokenAddress", "srcTokenSymbol", "srcTokenDecimals", "srcAmount", "dstTokenAddress", "dstTokenSymbol", "dstTokenDecimals"]}, {"description": "Wrap ETH to WETH", "to": "0x4200000000000000000000000000000000000006", "value": "ethAmountToDeposit", "function_name": "deposit", "input_args": ["abi", "WETH"]}, {"description": "Approve WETH for providing liquidity", "to": "0x4200000000000000000000000000000000000006", "value": "0", "function_name": "approve", "input_args": ["abi", "WETH", "aerodromeRouterAddr", "ethAmountToDeposit"]}, {"description": "Approve DEGEN for providing liquidity", "to": "degenAddr", "value": "0", "function_name": "approve", "input_args": ["abi", "DEGEN", "aerodromeRouterAddr", "degenAmountToDeposit"]}, {"description": "Provide WETH and DEGEN liquidity on Aerodrome", "to": "0xcF77a3Ba9A5CA399B7c97c74d54e5b1Beb874E43", "value": "0", "function_name": "addLiquidity", "input_args": ["abi", "AerodromeRouter", "wETHAddr", "degenAddr", "false", "ethAmountToDeposit", "degenAmountToDeposit", "(ethAmountToDeposit * BigInt(992)) / BigInt(1000)", "(degenAmountToDeposit * BigInt(992)) / BigInt(1000)", "context.account.address", "deadline"]}, {"description": "Approve LP Token(vAMM-WETH/DEGEN) for farming", "to": "0x2C4909355b0C036840819484c3A882A95659aBf3", "value": "0", "function_name": "approve", "input_args": ["abi", "vAMMWETHDEGEN", "aerodromeGaugeAddr", "estimatedLiquidity"]}, {"description": "Deposit LP token(vAMM-WETH/DEGEN) and start farming", "to": "0x86a1260ab9f758026ce1a5830bdff66dbcf736d5", "value": "0", "function_name": "deposit", "input_args": ["abi", "AerodromeGauge", "lpTokenAmount"]}]}
{"case_id": "rho_supply", "description": "Rho Supply Case for ETH to STONE token swap and supply.", "steps": [{"description": "Swap ETH for STONE token", "to": "stoneAddr", "value": "amount", "function_name": "swapTx", "input_args": ["chain", "baseAddr", "baseSymbol", "baseDecimals", "baseAmount", "quoteAddr", "quoteSymbol", "quoteDecimals"]}, {"description": "Approve STONE token for Rho Markets", "to": "stoneAddr", "value": "quoteAmount", "function_name": "approveERC20TxIfNeeded", "input_args": ["chain", "userAddress", "tokenAddress", "tokenSymbol", "tokenDecimals", "spenderAddress", "spenderName", "amount"]}, {"description": "Supply STONE token to Rho Markets", "to": "rStoneAddr", "value": "quoteAmount", "function_name": "supplyErc20Tx", "input_args": ["rTokenAddr", "tokenSymbol", "tokenDecimals", "tokenAmount"]}]}
{"case_id": "rho_withdraw", "description": "Rho withdraw process involving ERC20 token transactions.", "steps": [{"description": "Redeem rSTONE tokens for the specified amount.", "to": "rStoneAddr", "value": "amount", "function_name": "redeemErc20Tx", "input_args": ["rStoneAddr", "rSTONE", "18", "amount"]}, {"description": "Approve STONE token transfer if needed.", "to": "crocSwapDexAddr", "value": "redeemAmount", "function_name": "approveERC20TxIfNeeded", "input_args": ["context.chain", "userAddress", "stoneAddr", "STONE", "18", "crocSwapDexAddr", "Ambient", "redeemAmount"]}, {"description": "Swap STONE tokens for ETH.", "to": "ethAddr", "value": "redeemAmount", "function_name": "swapTx", "input_args": ["context.chain", "stoneAddr", "STONE", "18", "redeemAmount", "ethAddr", "ETH", "18"]}]}
{"case_id": "zircuit_renzo", "description": "Zircuit Renzo staking case", "steps": [{"description": "Stake ETH to ezETH", "to": "0x74a09653A083691711cF8215a6ab074BB4e99ef5", "value": "ethInputAmount", "function_name": "depositETH", "input_args": ["0x80011844928B469EAc5E4bC7e6EBA9b3C2Fa1b41"]}, {"description": "Approve ezETH for Zircuit", "to": "0xbf5495Efe5DB9ce00f80364C8B423567e58d2110", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "ezEthAmountBigInt"]}, {"description": "Stake ezETH to Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0xbf5495Efe5DB9ce00f80364C8B423567e58d2110", "context.account.address", "ezEthAmountBigInt"]}]}
{"case_id": "kelp_and_pendle", "description": "Kelp and Pendle liquidity provision and staking process.", "steps": [{"description": "Stake ETH for ETHx on Stader", "to": "0xcf5EA1b38380f6aF39068375516Daf40Ed70D299", "value": "0.001 ETH", "function_name": "deposit", "input_args": ["userAddress"]}, {"description": "Approve ETHx transfer to Kelp", "to": "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b", "value": "0", "function_name": "approve", "input_args": ["0x036676389e48133B63a802f8635AD39E752D375D", "ethxAmount"]}, {"description": "Deposit ETHx for rsETH on Kelp", "to": "0x036676389e48133B63a802f8635AD39E752D375D", "value": "0", "function_name": "depositAsset", "input_args": ["0xA35b1B31Ce002FBF2058D22F30f95D405200A15b", "ethxAmountToDeposit", "0", "kelpReferralId"]}, {"description": "Approve rsETH transfer to Pendle", "to": "0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7", "value": "0", "function_name": "approve", "input_args": ["pendleTxInfo.routerAddress", "rsETHAmount"]}, {"description": "Provide liquidity to PT/SY pool on Pendle", "to": "0x4f43c77872Db6BA177c270986CD30c3381AF37Ee", "value": "0", "function_name": "provideLiquidity", "input_args": ["rsETHAmountToDeposit"]}]}
{"case_id": "aave_usdc_eth", "description": "AAVE USDC to ETH borrowing case", "steps": [{"description": "Approve USDC for AAVE", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "approve", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "amount"]}, {"description": "Supply USDC to AAVE as collateral", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "supply", "input_args": ["0xA0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "usdcAmount", "userAddress", "0"]}, {"description": "Disable AAVE E-Mode if it is enabled", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "setUserEMode", "input_args": ["0"]}, {"description": "Delegate borrowing power on the debt WETH if needed", "to": "0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE", "value": "0", "function_name": "approveDelegation", "input_args": ["0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "ethAmount"]}, {"description": "Borrow ETH from AAVE", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "0", "function_name": "borrowETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "ethAmount", "2", "0"]}]}
{"case_id": "aave_supply_cases", "description": "Various supply cases for AAVE across different chains and asset types.", "steps": [{"description": "Build supply case for base ETH", "to": "base", "value": "0.00006", "function_name": "buildSupplyCase", "input_args": ["aave_base_supply_eth", "base", "proto_base_v3", "baseETHAssets", "1 ~ 9", "True", "0.00006"]}, {"description": "Build supply case for base stablecoin", "to": "base", "value": "0.2", "function_name": "buildSupplyCase", "input_args": ["aave_base_supply_stablecoin", "base", "proto_base_v3", "baseStablecoinAssets", "2 ~ 4", "True", "0.2, TokenAddress.Base.USDC"]}, {"description": "Build supply case for polygon MATIC", "to": "polygon", "value": "0.4", "function_name": "buildSupplyCase", "input_args": ["aave_polygon_supply_matic", "polygon", "proto_polygon_v3", "polygonMaticAssets.concat(polygonETHAssets)", "1 ~ 11", "True", "0.4"]}, {"description": "Build supply case for polygon stablecoin", "to": "polygon", "value": "0.2", "function_name": "buildSupplyCase", "input_args": ["aave_polygon_supply_stablecoin", "polygon", "proto_polygon_v3", "polygonStablecoinAssets", "2 ~ 8", "True", "0.2, TokenAddress.Polygon.USDT"]}, {"description": "Build supply case for arbitrum ETH", "to": "arbitrum", "value": "0.00006", "function_name": "buildSupplyCase", "input_args": ["aave_arbitrum_supply_eth", "arbitrum", "proto_arbitrum_v3", "arbitrumETHAssets", "1 ~ 9", "True", "0.00006"]}, {"description": "Build supply case for arbitrum stablecoin", "to": "arbitrum", "value": "0.2", "function_name": "buildSupplyCase", "input_args": ["aave_arbitrum_supply_stablecoin", "arbitrum", "proto_arbitrum_v3", "arbitrumStablecoinAssets", "2 ~ 10", "True", "0.2, TokenAddress.Arbitrum.USDT"]}, {"description": "Build supply case for optimism ETH", "to": "optimism", "value": "0.00006", "function_name": "buildSupplyCase", "input_args": ["aave_optimism_supply_eth", "optimism", "proto_optimism_v3", "optimismETHAssets", "1 ~ 7", "True", "0.00006"]}, {"description": "Build supply case for optimism stablecoin", "to": "optimism", "value": "0.2", "function_name": "buildSupplyCase", "input_args": ["aave_optimism_supply_stablecoin", "optimism", "proto_optimism_v3", "optimismStablecoinAssets", "2 ~ 12", "True", "0.2, TokenAddress.Optimism.USDT"]}, {"description": "Build supply case for ethereum ETH", "to": "mainnet", "value": "0.00006", "function_name": "buildSupplyCase", "input_args": ["aave_ethereum_supply_eth", "mainnet", "proto_mainnet_v3", "ethereumETHAssets", "1 ~ 13", "True", "0.00006"]}, {"description": "Build supply case for ethereum stablecoin", "to": "mainnet", "value": "0.2", "function_name": "buildSupplyCase", "input_args": ["aave_ethereum_supply_stablecoin", "mainnet", "proto_mainnet_v3", "ethereumStablecoinAssets", "2 ~ 16", "True", "0.2, TokenAddress.Mainnet.USDT"]}]}
{"case_id": "aave_eth_eth_emode", "description": "AAVE ETH E-Mode case for supplying and borrowing ETH.", "steps": [{"description": "Supply ETH to AAVE as collateral", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "<ETH Amount>", "function_name": "depositETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "<account_address>", "0"]}, {"description": "Enable AAVE E-Mode if it is disabled", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "setUserEMode", "input_args": ["1"]}, {"description": "Delegate borrowing power on the debt WETH if needed", "to": "0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE", "value": "0", "function_name": "approveDelegation", "input_args": ["0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "<borrowEthAmount>"]}, {"description": "Borrow ETH from AAVE", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "0", "function_name": "borrowETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "<borrowEthAmount>", "2", "0"]}]}
{"case_id": "aave_eth_eth", "description": "AAVE ETH collateral and borrowing case", "steps": [{"description": "Supply ETH to AAVE as collateral", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "<ethAmount>", "function_name": "depositETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "<account_address>", "0"]}, {"description": "Disable AAVE E-Mode if it is enabled", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "setUserEMode", "input_args": ["0"]}, {"description": "Delegate borrowing power on the debt WETH if needed", "to": "0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE", "value": "0", "function_name": "approveDelegation", "input_args": ["0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "<borrowEthAmount>"]}, {"description": "Borrow ETH from AAVE", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "0", "function_name": "borrowETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "<borrowEthAmount>", "2", "0"]}]}
{"case_id": "aave_base_repay_eth", "description": "Repay ETH on AAVE in the base chain", "steps": [{"description": "Preview repay transaction for native token", "to": "AAVE", "value": "0", "function_name": "repayNativeTokenPreviewTx", "input_args": ["base", "ETH"]}, {"description": "Repay native token", "to": "AAVE", "value": "0", "function_name": "repayNativeTokenTx", "input_args": ["base", "inputAmount", "ETH", "tokenDecimals", "userAddress"]}]}
{"case_id": "aave_withdrawal_cases", "description": "Withdrawal cases for AAVE across different chains and asset types.", "steps": [{"description": "Build withdrawal case for base ETH", "to": "base", "value": "1 ~ 5", "function_name": "buildWithdrawalCase", "input_args": ["id: 'aave_base_withdraw_eth'", "chain: base", "marketName: 'proto_base_v3'", "assets: baseETHAssets.filter((asset) => !asset.notSupportWithdraw)", "txCount: '1 ~ 5'"]}, {"description": "Build withdrawal case for base stablecoin", "to": "base", "value": "1 ~ 2", "function_name": "buildWithdrawalCase", "input_args": ["id: 'aave_base_withdraw_stablecoin'", "chain: base", "marketName: 'proto_base_v3'", "assets: baseStablecoinAssets", "txCount: '1 ~ 2'"]}, {"description": "Build withdrawal case for polygon MATIC", "to": "polygon", "value": "1 ~ 6", "function_name": "buildWithdrawalCase", "input_args": ["id: 'aave_polygon_withdraw_matic'", "chain: polygon", "marketName: 'proto_polygon_v3'", "assets: polygonMaticAssets.concat(polygonETHAssets).filter((asset) => !asset.notSupportWithdraw)", "txCount: '1 ~ 6'"]}, {"description": "Build withdrawal case for polygon stablecoin", "to": "polygon", "value": "1 ~ 4", "function_name": "buildWithdrawalCase", "input_args": ["id: 'aave_polygon_withdraw_stablecoin'", "chain: polygon", "marketName: 'proto_polygon_v3'", "assets: polygonStablecoinAssets", "txCount: '1 ~ 4'"]}, {"description": "Build withdrawal case for arbitrum ETH", "to": "arbitrum", "value": "1 ~ 5", "function_name": "buildWithdrawalCase", "input_args": ["id: 'aave_arbitrum_withdraw_eth'", "chain: arbitrum", "marketName: 'proto_arbitrum_v3'", "assets: arbitrumETHAssets.filter((asset) => !asset.notSupportWithdraw)", "txCount: '1 ~ 5'"]}, {"description": "Build withdrawal case for arbitrum stablecoin", "to": "arbitrum", "value": "1 ~ 5", "function_name": "buildWithdrawalCase", "input_args": ["id: 'aave_arbitrum_withdraw_stablecoin'", "chain: arbitrum", "marketName: 'proto_arbitrum_v3'", "assets: arbitrumStablecoinAssets", "txCount: '1 ~ 5'"]}, {"description": "Build withdrawal case for optimism ETH", "to": "optimism", "value": "1 ~ 4", "function_name": "buildWithdrawalCase", "input_args": ["id: 'aave_optimism_withdraw_eth'", "chain: optimism", "marketName: 'proto_optimism_v3'", "assets: optimismETHAssets.filter((asset) => !asset.notSupportWithdraw)", "txCount: '1 ~ 4'"]}, {"description": "Build withdrawal case for optimism stablecoin", "to": "optimism", "value": "1 ~ 6", "function_name": "buildWithdrawalCase", "input_args": ["id: 'aave_optimism_withdraw_stablecoin'", "chain: optimism", "marketName: 'proto_optimism_v3'", "assets: optimismStablecoinAssets", "txCount: '1 ~ 6'"]}, {"description": "Build withdrawal case for ethereum ETH", "to": "mainnet", "value": "1 ~ 7", "function_name": "buildWithdrawalCase", "input_args": ["id: 'aave_ethereum_withdraw_eth'", "chain: mainnet", "marketName: 'proto_mainnet_v3'", "assets: ethereumETHAssets.filter((asset) => !asset.notSupportWithdraw)", "txCount: '1 ~ 7'"]}, {"description": "Build withdrawal case for ethereum stablecoin", "to": "mainnet", "value": "1 ~ 8", "function_name": "buildWithdrawalCase", "input_args": ["id: 'aave_ethereum_withdraw_stablecoin'", "chain: mainnet", "marketName: 'proto_mainnet_v3'", "assets: ethereumStablecoinAssets", "txCount: '1 ~ 8'"]}]}
{"case_id": "aave_usdt_eth", "description": "AAVE USDT to ETH borrowing case", "steps": [{"description": "Approve USDT for AAVE", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "approve", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "amount"]}, {"description": "Supply USDT to AAVE as collateral", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "supply", "input_args": ["0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419", "amount", "userAddress", "0"]}, {"description": "Disable AAVE E-Mode if enabled", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "setUserEMode", "input_args": ["0"]}, {"description": "Delegate borrowing power on the debt WETH if needed", "to": "0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE", "value": "0", "function_name": "approveDelegation", "input_args": ["0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "ethAmount"]}, {"description": "Borrow ETH from AAVE", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "0", "function_name": "borrowETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "ethAmount", "2", "0"]}]}
{"case_id": "unstake_eth", "description": "Unstake ETH from various protocols", "steps": [{"description": "Unstake from Lido", "to": "userAddress", "value": "inputAmount", "function_name": "lidoUnstakeWSETHTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from RocketPool", "to": "userAddress", "value": "inputAmount", "function_name": "rocketpoolUnstakeTx", "input_args": ["inputAmount"]}, {"description": "Swap tokens using 1inch from staked token to ETH", "to": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "value": "inputAmount", "function_name": "swapTx", "input_args": ["mainnet.id", "userAddress", "stakingProtocols[i].stakedTokenAddr", "stakingProtocols[i].stakedTokenSymbol", "18", "inputAmount", "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "ETH", "18"]}, {"description": "Unstake from StakeWise", "to": "userAddress", "value": "inputAmount", "function_name": "stakewiseUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from Stader", "to": "userAddress", "value": "inputAmount", "function_name": "staderUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from EtherFi", "to": "userAddress", "value": "inputAmount", "function_name": "etherFiUnstakeWEETHTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from Renzo", "to": "userAddress", "value": "inputAmount", "function_name": "renzoUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from Frax Finance", "to": "userAddress", "value": "inputAmount", "function_name": "fraxUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from Swell", "to": "userAddress", "value": "inputAmount", "function_name": "swellUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from Redacted Finance", "to": "userAddress", "value": "inputAmount", "function_name": "dineroUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}]}
{"case_id": "stake_eth", "description": "Stake ETH into various protocols", "steps": [{"description": "Get APY value", "to": "getApyValue()", "value": "", "function_name": "getApyValue", "input_args": []}, {"description": "Get displayed APY range", "to": "getDisplayedApy()", "value": "", "function_name": "getDisplayedApy", "input_args": []}, {"description": "Stake into Lido", "to": "stakeToLidoGetWSTETHTxs()", "value": "", "function_name": "stakeToLidoGetWSTETHTxs", "input_args": ["{chain: mainnet, inputAmount: inputAmount}"]}, {"description": "Stake into RocketPool", "to": "rocketpoolStakeTx()", "value": "", "function_name": "rocketpoolStakeTx", "input_args": ["inputAmount"]}, {"description": "Swap ETH for staked token using 1Inch", "to": "swapTx()", "value": "", "function_name": "swapTx", "input_args": ["{chainId: mainnet.id, userAddress: userAddress, srcTokenAddress: '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee', srcTokenSymbol: 'ETH', srcTokenDecimals: 18, srcAmount: inputAmount, dstTokenAddress: stakingProtocols[i].stakedTokenAddr, dstTokenSymbol: stakingProtocols[i].stakedTokenSymbol, dstTokenDecimals: 18}"]}, {"description": "Stake into StakeWise", "to": "stakewiseStakeTx()", "value": "", "function_name": "stakewiseStakeTx", "input_args": ["inputAmount", "userAddress"]}, {"description": "Stake into Stader", "to": "staderStakeTx()", "value": "", "function_name": "staderStakeTx", "input_args": ["inputAmount", "userAddress"]}, {"description": "Stake into EtherFi", "to": "stakeToEtherFiGetWEETHTxs()", "value": "", "function_name": "stakeToEtherFiGetWEETHTxs", "input_args": ["{chain: mainnet, inputAmount: inputAmount}"]}, {"description": "Stake into Renzo", "to": "renzoStakeTx()", "value": "", "function_name": "renzoStakeTx", "input_args": ["inputAmount"]}, {"description": "Stake into FraxFinance", "to": "fraxStakeTx()", "value": "", "function_name": "fraxStakeTx", "input_args": ["inputAmount", "userAddress"]}, {"description": "Stake into Swell", "to": "swellStakeTx()", "value": "", "function_name": "swellStakeTx", "input_args": ["inputAmount"]}, {"description": "Stake into RedactedFinance", "to": "dineroStakeTx()", "value": "", "function_name": "dineroStakeTx", "input_args": ["inputAmount", "userAddress"]}]}
{"case_id": "zircuit_eigenpie_swell", "description": "A case for staking ETH and restaking swETH and mswETH across multiple protocols to earn rewards.", "steps": [{"description": "Stake ETH with Swell and receive swETH", "to": "0xf951E335afb289353dc249e82926178EaC7DEd78", "value": "ethInputAmount", "function_name": "depositWithReferral", "input_args": ["ReferalAccount"]}, {"description": "Approve swETH to be restaked to Eigenlayer on Eigenpie", "to": "0xf951E335afb289353dc249e82926178EaC7DEd78", "value": "0", "function_name": "approve", "input_args": ["0x24db6717dB1C75B9Db6eA47164D8730B63875dB7", "swETHDepositAmount"]}, {"description": "Restake swETH with Eigenpie and receive mswETH", "to": "0x24db6717dB1C75B9Db6eA47164D8730B63875dB7", "value": "0", "function_name": "depositAsset", "input_args": ["0xf951E335afb289353dc249e82926178EaC7DEd78", "swETHDepositAmount", "mswETHAmount", "ReferalAccount"]}, {"description": "Approve mswETH to be restaked on Zircuit", "to": "0x32bd822d615A3658A68b6fDD30c2fcb2C996D678", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "mswETHAmount"]}, {"description": "Restake mswETH with Zircuit to earn Zircuit Points", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0x32bd822d615A3658A68b6fDD30c2fcb2C996D678", "context.account.address", "mswETHAmount"]}]}
{"case_id": "juice_points", "description": "Juice Finance ETH to wETH deposit and borrowing strategy", "steps": [{"description": "Wrap ETH to wETH", "to": "0x4300000000000000000000000000000000000004", "value": "<ethInputAmount>", "function_name": "deposit", "input_args": []}, {"description": "Create account on Juice", "to": "0x23eBa06981B5c2a6f1a985BdCE41BD64D18e6dFA", "value": "0", "function_name": "createAccount", "input_args": []}, {"description": "Approve wETH for Juice", "to": "0x4300000000000000000000000000000000000004", "value": "0", "function_name": "approve", "input_args": ["0x23eBa06981B5c2a6f1a985BdCE41BD64D18e6dFA", "<ethInputAmount>"]}, {"description": "Deposit wETH to Juice", "to": "0x23eBa06981B5c2a6f1a985BdCE41BD64D18e6dFA", "value": "0", "function_name": "deposit", "input_args": ["<ethInputAmount>", "<context.account.address>"]}, {"description": "Borrow wETH from Juice", "to": "<juiceAccountAddr>", "value": "0", "function_name": "borrow", "input_args": ["<borrowAmount>"]}, {"description": "Deposit wETH to ezETH Spot Long vault on Juice", "to": "<juiceAccountAddr>", "value": "0", "function_name": "strategyDeposit", "input_args": ["0x741011f52B7499ca951f8b8Ee547DD3Cdd813Fda", "<borrowAmount>", "<minOutAmount>"]}]}
{"case_id": "ether_fi_liquid", "description": "EtherFi Liquid staking case", "steps": [{"description": "Get APY value", "to": "N/A", "value": "N/A", "function_name": "getApyValue", "input_args": []}, {"description": "Validate ETH Amount", "to": "N/A", "value": "N/A", "function_name": "decimalValidator", "input_args": ["18", "0"]}, {"description": "Get WEETH transactions", "to": "N/A", "value": "N/A", "function_name": "getWEETHTxs", "input_args": ["{ chain: context.chain, inputAmount }"]}, {"description": "Estimate WEETH Amount", "to": "N/A", "value": "N/A", "function_name": "estimateWEETHAmount", "input_args": ["{ chain: context.chain, inputAmount }"]}, {"description": "Approve and deposit WEETH to EtherFi Vault", "to": "userAddress", "value": "weETHAmount", "function_name": "approveAndDepositWEETHToEtherFiVaultTx", "input_args": ["{ inputAmount: weETHAmount, receiver: userAddress }"]}, {"description": "Get WEETH preview transactions", "to": "N/A", "value": "N/A", "function_name": "getWEETHPreviewTxs", "input_args": []}, {"description": "Approve and deposit WEETH to EtherFi Vault preview transaction", "to": "N/A", "value": "N/A", "function_name": "approveAndDepositWEETHToEtherFiVaultPreviewTx", "input_args": []}]}
{"case_id": "bento_batch_official_nft", "description": "Minting of Bento Batch official NFTs with options for free and paid minting.", "steps": [{"description": "Check if the wallet is connected", "to": "", "value": "", "function_name": "", "input_args": []}, {"description": "Validate the amount of NFTs to mint", "to": "", "value": "", "function_name": "", "input_args": ["mintAmount"]}, {"description": "Get the contract instance for BentoNFTMintUtil", "to": "0xBc1Bb37A522EDB1cAa073ac2B3DEbAcd5E89D81d", "value": "", "function_name": "getContract", "input_args": ["BentoNFTMintUtil"]}, {"description": "Fetch the mint fee from the contract", "to": "0xBc1Bb37A522EDB1cAa073ac2B3DEbAcd5E89D81d", "value": "", "function_name": "read.mintFee", "input_args": []}, {"description": "Fetch the free mint amount per account", "to": "0xBc1Bb37A522EDB1cAa073ac2B3DEbAcd5E89D81d", "value": "", "function_name": "read.freeMintAmountPerAccount", "input_args": []}, {"description": "Fetch the already minted amount for the account", "to": "0xBc1Bb37A522EDB1cAa073ac2B3DEbAcd5E89D81d", "value": "", "function_name": "read.alreadyMintAmount", "input_args": ["context.account.address"]}, {"description": "Calculate the free and paid mint amounts", "to": "", "value": "", "function_name": "", "input_args": ["freeMintAmount", "paidMintAmount"]}, {"description": "Check the ETH balance of the account", "to": "", "value": "", "function_name": "getBalance", "input_args": ["context.account.address"]}, {"description": "Mint the NFTs in a loop", "to": "0xBc1Bb37A522EDB1cAa073ac2B3DEbAcd5E89D81d", "value": "paidMintFee", "function_name": "randomlyMint", "input_args": ["i"]}]}
{"case_id": "lido_multiplier", "description": "A case for managing ETH supply and borrowing using Lido and AAVE protocols with risk multipliers.", "steps": [{"description": "Stake ETH to Lido", "to": "Lido", "value": "inputAmount", "function_name": "stakeToLidoTx", "input_args": ["inputAmount"]}, {"description": "Wrap stETH to wstETH", "to": "Lido", "value": "inputAmount - 1", "function_name": "wrapSTETHToWSTETHTx", "input_args": ["chain", "inputAmount - 1"]}, {"description": "Estimate wstETH amount", "to": "Lido", "value": "wstETHAmount", "function_name": "estimateWSTETHAmount", "input_args": ["chain", "inputAmount"]}, {"description": "Supply wstETH to AAVE", "to": "AAVE", "value": "wstETHAmount", "function_name": "supplyWSTETHTx", "input_args": ["wstETHAmount", "userAddress"]}, {"description": "Borrow ETH", "to": "AAVE", "value": "borrowAmount", "function_name": "borrowETHTx", "input_args": ["borrowAmount"]}, {"description": "Enable E-Mode if not already enabled", "to": "AAVE", "value": "N/A", "function_name": "enableEModeTx", "input_args": []}, {"description": "Delegate transaction", "to": "AAVE", "value": "targetAmount", "function_name": "delegateTx", "input_args": ["targetAmount"]}, {"description": "Approve stETH to wstETH", "to": "Lido", "value": "targetAmount", "function_name": "checkOrApporveSTETHToWSTETHTx", "input_args": ["chain", "userAddress", "targetAmount"]}, {"description": "Approve wstETH to AAVE", "to": "AAVE", "value": "targetAmount", "function_name": "checkOrApporveWSTETHToAAVETx", "input_args": ["chain", "userAddress", "targetAmount"]}, {"description": "Stake, wrap, and supply wstETH for n-1 iterations", "to": "AAVE", "value": "nextBorrowAmount", "function_name": "borrowStakeWrapSupply", "input_args": ["chain", "nextBorrowAmount", "userAddress"]}]}
{"case_id": "stone_swell_l2", "description": "Stake ETH to receive STONE and stake STONE to Swell L2.", "steps": [{"description": "Deposit ETH to StakeStone and receive STONE", "to": "0xa62f9c5af106feee069f38de51098d9d81b90572", "value": "inputAmount", "function_name": "deposit", "input_args": ["0xd0e30db0"]}, {"description": "Approve STONE to Swell L2", "to": "0x38d43a6cb8da0e855a42fb6b0733a0498531d774", "value": "0", "function_name": "approve", "input_args": ["0x7122985656e38BDC0302Db86685bb972b145bD3C", "receiveStoneAmount"]}, {"description": "Stake STONE to Swell L2", "to": "0x38d43a6cb8da0e855a42fb6b0733a0498531d774", "value": "0", "function_name": "deposit", "input_args": ["0x7122985656e38BDC0302Db86685bb972b145bD3C", "receiveStoneAmount", "userAddress"]}]}
{"case_id": "scroll_stone", "description": "A structured case for swapping ETH to STONE and splitting into different tokens.", "steps": [{"description": "Swap ETH to STONE on Izumi", "to": "0x2db0AFD0045F3518c77eC6591a542e326Befd3D7", "value": "inputAmount", "function_name": "multicall", "input_args": ["0x5300000000000000000000000000000000000004000bb880137510979822322193fc997d400d5a6c747bf7", "userAddress", "inputAmount", "minAcquired", "deadline"]}, {"description": "Approve STONE for Primary Market Router V2", "to": "0x194c6AcC13E7ecDCb6fc767359291A6fEE179440", "value": "0", "function_name": "approve", "input_args": ["userAddress", "minAcquired"]}, {"description": "Swap STONE to stoneQUEEN on Tranchess", "to": "0x194c6AcC13E7ecDCb6fc767359291A6fEE179440", "value": "0", "function_name": "create", "input_args": ["userAddress", "minAcquired", "minOutQ", "0"]}, {"description": "Split stoneQUEEN into staYSTONE and turPSTONE", "to": "0x21366dE9707A1044e351280f085821C734791cee", "value": "0", "function_name": "split", "input_args": ["userAddress", "minOutQ", "0"]}]}
{"case_id": "compound_supply_arbitrum", "description": "Supply case for Arbitrum chain", "steps": [{"description": "Get transaction count for assets", "to": "N/A", "value": "N/A", "function_name": "getTxCount", "input_args": ["arbitrumAssets"]}, {"description": "Get APY value for assets", "to": "N/A", "value": "N/A", "function_name": "getApyValue", "input_args": ["arbitrumAssets"]}, {"description": "Check platform fee in optional input", "to": "N/A", "value": "N/A", "function_name": "checkPlatformFeeInOptionalInput", "input_args": ["context.chain", "context.account.address", "platformFee", "context.inputs", "arbitrumAssets"]}, {"description": "Deposit WETH transaction", "to": "asset.wrappedTokenAddr", "value": "inputAmount", "function_name": "depositWETHTx", "input_args": ["asset.wrappedTokenAddr", "inputAmount"]}, {"description": "Approve ERC20 transaction if needed", "to": "asset.wrappedTokenAddr", "value": "inputAmount", "function_name": "approveERC20TxIfNeeded", "input_args": ["context.chain", "context.account.address", "asset.wrappedTokenAddr", "asset.wrappedTokenSymbol", "asset.tokenDecimals", "asset.cometAddr", "Compound", "inputAmount"]}, {"description": "Supply ERC20 token transaction", "to": "asset.cometAddr", "value": "inputAmount", "function_name": "supplyERC20TokenTx", "input_args": ["asset.cometAddr", "asset.wrappedTokenAddr", "inputAmount", "asset.wrappedTokenSymbol", "asset.tokenDecimals"]}, {"description": "Approve ERC20 transaction if needed", "to": "asset.tokenAddr", "value": "inputAmount", "function_name": "approveERC20TxIfNeeded", "input_args": ["context.chain", "context.account.address", "asset.tokenAddr", "asset.tokenSymbol", "asset.tokenDecimals", "asset.cometAddr", "Compound", "inputAmount"]}, {"description": "Supply ERC20 token transaction", "to": "asset.cometAddr", "value": "inputAmount", "function_name": "supplyERC20TokenTx", "input_args": ["asset.cometAddr", "asset.tokenAddr", "inputAmount", "asset.tokenSymbol", "asset.tokenDecimals"]}]}
{"case_id": "withdraw_cases", "description": "Withdrawal cases for various blockchain networks", "steps": [{"description": "Build withdrawal case for Arbitrum", "to": "arbitrum", "value": "0", "function_name": "buildWithdrawCase", "input_args": ["{ id: 'compound_withdraw_arbitrum', chain: arbitrum, assets: arbitrumAssets }"]}, {"description": "Build withdrawal case for Base", "to": "base", "value": "0", "function_name": "buildWithdrawCase", "input_args": ["{ id: 'compound_withdraw_base', chain: base, assets: baseAssets }"]}, {"description": "Build withdrawal case for Mainnet", "to": "mainnet", "value": "0", "function_name": "buildWithdrawCase", "input_args": ["{ id: 'compound_withdraw_mainnet', chain: mainnet, assets: mainnetAssets }"]}, {"description": "Build withdrawal case for Optimism", "to": "optimism", "value": "0", "function_name": "buildWithdrawCase", "input_args": ["{ id: 'compound_withdraw_optimism', chain: optimism, assets: optimismAssets }"]}, {"description": "Build withdrawal case for Polygon", "to": "polygon", "value": "0", "function_name": "buildWithdrawCase", "input_args": ["{ id: 'compound_withdraw_polygon', chain: polygon, assets: polygonAssets }"]}, {"description": "Build withdrawal case for Scroll", "to": "scroll", "value": "0", "function_name": "buildWithdrawCase", "input_args": ["{ id: 'compound_withdraw_scroll', chain: scroll, assets: scorllAssets }"]}]}
{"case_id": "zora_famous_creators", "description": "A case for minting NFTs from famous creators on Zora.", "steps": [{"description": "Check if the wallet is connected and retrieve ETH balance.", "to": "", "value": "", "function_name": "", "input_args": []}, {"description": "Calculate total price for minting NFTs based on user input.", "to": "", "value": "", "function_name": "", "input_args": ["loopAmount"]}, {"description": "Mint golden hour NFT with specified amount and price.", "to": "0xe019216b8c0cf7bd6df27de3c9b1d23ef985fd60", "value": "singleNFTPriceInETH", "function_name": "mint", "input_args": ["0x04E2516A2c207E84a1839755675dfd8eF6302F0a", "1", "loopAmount", "[ReferalAccount]", "encodeData"]}, {"description": "Check if the minting for one NFT is still valid based on sale end time.", "to": "", "value": "", "function_name": "", "input_args": ["oneCreatorAddress", "15"]}, {"description": "Mint one NFT with specified amount and price.", "to": "0x96f21c95de1abc90959dd5aa70aec1e0e5e2c2b4", "value": "singleNFTPriceInETH", "function_name": "mintNFTTx", "input_args": ["one"]}]}
{"case_id": "zora_most_minted", "description": "Minting two NFTs on the Zora platform.", "steps": [{"description": "Check if the user is connected to a wallet.", "to": "", "value": "", "function_name": "", "input_args": []}, {"description": "Get the user's ETH balance.", "to": "", "value": "", "function_name": "getBalance", "input_args": ["context.account.address"]}, {"description": "Calculate total price for minting NFTs.", "to": "", "value": "", "function_name": "", "input_args": ["loopAmount"]}, {"description": "Check if the user's ETH balance is sufficient for the transaction.", "to": "", "value": "", "function_name": "", "input_args": ["totalPriceInETH", "ethBalance"]}, {"description": "Check if the minting period for the first NFT has expired.", "to": "", "value": "", "function_name": "read.sale", "input_args": ["eleventCreatorAddress", "eleventTokenId"]}, {"description": "Check if the minting period for the second NFT has expired.", "to": "", "value": "", "function_name": "read.sale", "input_args": ["itsAFeelingCreatorAddress", "itsAFeelingTokenId"]}, {"description": "Prepare the transaction for minting the first NFT.", "to": "", "value": "", "function_name": "mintNFTTx", "input_args": ["elevent"]}, {"description": "Prepare the transaction for minting the second NFT.", "to": "", "value": "", "function_name": "mintNFTTx", "input_args": ["itsAFeeling"]}, {"description": "Return the list of transactions for minting NFTs.", "to": "", "value": "", "function_name": "", "input_args": []}]}
{"case_id": "zircuit_etherfi", "description": "Zircuit Etherfi staking process", "steps": [{"description": "Stake ETH to eETH", "to": "0x308861A430be4cce5502d0A12724771Fc6DaF216", "value": "ethInputAmount", "function_name": "deposit", "input_args": ["0x80011844928B469EAc5E4bC7e6EBA9b3C2Fa1b41"]}, {"description": "Approve eETH for wrapping as weETH", "to": "0x35fA164735182de50811E8e2E824cFb9B6118ac2", "value": "0", "function_name": "approve", "input_args": ["0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "eEthAmount"]}, {"description": "Wrap eETH to weETH", "to": "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "value": "0", "function_name": "wrap", "input_args": ["eEthAmount"]}, {"description": "Approve weETH to Zircuit", "to": "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "weEthAmount"]}, {"description": "Stake weETH to Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "context.account.address", "weEthAmount"]}]}
{"case_id": "zircuit_ethena_usdc", "description": "USDC to USDe conversion and staking in Zircuit", "steps": [{"description": "Approve USDC for Curve", "to": "0xA0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "value": "0", "function_name": "approve", "input_args": ["0x02950460E2b9529D0E00284A5fA2d7bDF3fA4d72", "usdcAmount"]}, {"description": "Swap USDC to USDe", "to": "0x02950460E2b9529D0E00284A5fA2d7bDF3fA4d72", "value": "0", "function_name": "exchange", "input_args": ["1", "0", "usdcAmount", "usdeAmount"]}, {"description": "Approve USDe for Zircuit", "to": "0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "usdeAmount"]}, {"description": "Stake USDe to Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "context.account.address", "usdeAmount"]}]}
{"case_id": "zircuit_ethena_usdt", "description": "USDT to USDe conversion and staking in Zircuit", "steps": [{"description": "Approve USDT for Uniswap", "to": "0xDac17F958D2ee523a2206206994597c13D831ec7", "value": "0", "function_name": "approve", "input_args": ["0xE592427A0AEce92De3Edee1F18E0157C05861564", "1000000"]}, {"description": "Swap USDT to USDe", "to": "0xE592427A0AEce92De3Edee1F18E0157C05861564", "value": "0", "function_name": "exactInputSingle", "input_args": ["[\"0xDac17F958D2ee523a2206206994597c13D831ec7\",\"0x4c9edd5852cd905f086c759e8383e09bff1e68b3\",\"100\",\"1000000\",\"0\"]"]}, {"description": "Approve USDe for Zircuit", "to": "0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "1000000"]}, {"description": "Stake USDe to Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "0xYourAccountAddress", "1000000"]}]}
{"case_id": "genesis_liquidity", "description": "Genesis liquidity case for staking and adding to UniswapV3 liquidity pool.", "steps": [{"description": "Stake ETH with Genesis and receive genETH", "to": "0x46199caa0e453971cedf97f926368d9e5415831a", "value": "ethForGenETH", "function_name": "stake", "input_args": ["0x80011844928B469EAc5E4bC7e6EBA9b3C2Fa1b41"]}, {"description": "Approve genETH to be added to the UniswapV3 liquidity pool", "to": "0xf073bAC22DAb7FaF4a3Dd6c6189a70D54110525C", "value": "0", "function_name": "approve", "input_args": ["0xc36442b4a4522e871399cd717abdd847ab11fe88", "genETHAmount"]}, {"description": "Stake ETH with Lido and receive stETH", "to": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84", "value": "ethForStETH", "function_name": "submit", "input_args": ["0x80011844928B469EAc5E4bC7e6EBA9b3C2Fa1b41"]}, {"description": "Approve stETH to be wrapped", "to": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84", "value": "0", "function_name": "approve", "input_args": ["0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0", "stETHAmount"]}, {"description": "Wrap stETH to wstETH", "to": "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0", "value": "0", "function_name": "wrap", "input_args": ["stETHAmount"]}, {"description": "Approve wstETH to be added to the UniswapV3 liquidity pool", "to": "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0", "value": "0", "function_name": "approve", "input_args": ["0xc36442b4a4522e871399cd717abdd847ab11fe88", "wstETHAmount"]}, {"description": "Add wstETH and genETH to the UniswapV3 liquidity pool", "to": "0xc36442b4a4522e871399cd717abdd847ab11fe88", "value": "0", "function_name": "mint", "input_args": ["{ token0: wstETH.address, token1: genETH.address, fee: 500, tickLower: tickLower, tickUpper: tickUpper, amount0Desired: wstETHAmount, amount1Desired: genETHAmount, amount0Min: 0, amount1Min: 0, recipient: context.account.address, deadline: numberToHex(Date.now() + 1000 * 60 * 10) }"]}]}
{"case_id": "pencils_deposit", "description": "Deposit into Pencils Protocol using ETH to acquire STONE tokens and deposit them.", "steps": [{"description": "Swap ETH for STONE tokens", "to": "0x80137510979822322193FC997d400D5A6C747bf7", "value": "amount", "function_name": "swapTx", "input_args": ["chain", "baseAddr", "ETH", "18", "amount", "stoneAddr", "STONE", "18"]}, {"description": "Approve STONE tokens for Pencils Protocol", "to": "0x20DE0435e5674Ef15E78adA570159984524B9E8F", "value": "quoteAmount", "function_name": "approveERC20TxIfNeeded", "input_args": ["chain", "userAddress", "stoneAddr", "STONE", "18", "pStoneAddr", "Pencils Protocol", "quoteAmount"]}, {"description": "Deposit STONE tokens into Pencils Protocol", "to": "0x20DE0435e5674Ef15E78adA570159984524B9E8F", "value": "quoteAmount", "function_name": "depositTx", "input_args": ["pStoneAddr", "STONE", "18", "quoteAmount"]}]}
{"case_id": "scroll_puffer_pencils", "description": "A case for swapping ETH to PufETH and depositing into Pencils Protocol.", "steps": [{"description": "Swap ETH for PufETH", "to": "0xc4d46E8402F476F269c379677C99F18E22Ea030e", "value": "amount", "function_name": "swapTx", "input_args": ["ETH", "amount", "0xc4d46E8402F476F269c379677C99F18E22Ea030e", "PufETH", "userAddress"]}, {"description": "Approve ERC20 token for Pencils Protocol", "to": "0x0C530882C0900b13FC6E8312B52c26e7a5b8e505", "value": "adjustedQuoteAmount", "function_name": "approveERC20TxIfNeeded", "input_args": ["context.chain", "userAddress", "0xc4d46E8402F476F269c379677C99F18E22Ea030e", "PufETH", "pencilsVaultDecimals", "0x0C530882C0900b13FC6E8312B52c26e7a5b8e505", "Pencils Protocol", "adjustedQuoteAmount"]}, {"description": "Deposit PufETH into Pencils Protocol", "to": "0x0C530882C0900b13FC6E8312B52c26e7a5b8e505", "value": "adjustedQuoteAmount", "function_name": "depositTx", "input_args": ["0x0C530882C0900b13FC6E8312B52c26e7a5b8e505", "PufETH", "pencilsVaultDecimals", "adjustedQuoteAmount"]}]}
{"case_id": "multi_sender", "description": "Multi Sender for USDT on Polygon", "steps": [{"description": "Transfer USDT to recipient", "to": "TokenAddress.Polygon.USDT", "value": "0", "function_name": "transfer", "input_args": ["recipient_address", "amount"]}, {"description": "Transfer USDT to recipient", "to": "TokenAddress.Polygon.USDT", "value": "0", "function_name": "transfer", "input_args": ["recipient_address", "amount"]}, {"description": "Transfer USDT to recipient", "to": "TokenAddress.Polygon.USDT", "value": "0", "function_name": "transfer", "input_args": ["recipient_address", "amount"]}]}
{"case_id": "etf_base_meme_top10", "description": "Swap USDC to Top 10 tokens using 1inch", "steps": [{"description": "Fetch CMC data for top 10 tokens by market cap", "to": "", "value": "", "function_name": "fetchCMCByMarketCap", "input_args": []}, {"description": "Calculate total market cap and percentage for each token", "to": "", "value": "", "function_name": "calculateMarketCap", "input_args": ["data"]}, {"description": "Fill in decimals for each token", "to": "", "value": "", "function_name": "fillDecimals", "input_args": ["context.chain", "top10tokensNoDecmals"]}, {"description": "Check allowance for USDC", "to": "", "value": "", "function_name": "allowance", "input_args": ["context.chain", "context.account.address", "USDCAddr", "oneInchAddress"]}, {"description": "Approve USDC if allowance is insufficient", "to": "oneInchAddress", "value": "usdcAmount", "function_name": "approveERC20Tx", "input_args": ["USDCAddr", "USDC", "6", "oneInchAddress", "1Inch", "usdcAmount"]}, {"description": "Swap USDC for each top token based on calculated percentage", "to": "oneInchAddress", "value": "usdcUsage", "function_name": "swapTx", "input_args": ["base.id", "context.account.address", "USDCAddr", "USDC", "6", "usdcUsage", "token.address", "token.symbol", "token.decimals", "5.0"]}]}
