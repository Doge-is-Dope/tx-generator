{"case_id": "yearn_v3_usdce", "description": "Approve and deposit USDC.e to Yearn V3 vault", "steps": [{"description": "Approve USDC.e vault to spend USDC.e on Yearn V3", "to": "0xA013Fbd4b711f9ded6fB09C1c0d358E2FbC2EAA0", "value": "0", "function_name": "approve", "input_args": ["0xA013Fbd4b711f9ded6fB09C1c0d358E2FbC2EAA0", "amountBN"]}, {"description": "Deposit USDC.e to vault USDC.e-A on Yearn V3", "to": "0xA013Fbd4b711f9ded6fB09C1c0d358E2FbC2EAA0", "value": "0", "function_name": "deposit", "input_args": ["amountBN", "userAddress"]}]}
{"case_id": "eigenpie_steth", "description": "Stake ETH to Lido and then stake stETH to Eigenpie", "steps": [{"description": "Stake ETH to Lido", "to": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84", "value": "ETH Amount", "function_name": "submit", "input_args": ["ReferalAccount"]}, {"description": "Approve stETH to Eigenpie", "to": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84", "value": "0", "function_name": "approve", "input_args": ["0x24db6717dB1C75B9Db6eA47164D8730B63875dB7", "estimateSTETHAmount"]}, {"description": "Stake stETH to Eigenpie", "to": "0x24db6717dB1C75B9Db6eA47164D8730B63875dB7", "value": "0", "function_name": "depositAsset", "input_args": ["0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84", "estimateSTETHAmount", "estimateMSTETHAmount", "ReferalAccount"]}]}
{"case_id": "ether_fi_arbitrum_bridge", "description": "Bridge ETH to Arbitrum via ether.fi, including staking, wrapping, and approval steps.", "steps": [{"description": "Stake ETH to ether.fi", "to": "0x308861A430be4cce5502d0A12724771Fc6DaF216", "value": "inputAmount", "function_name": "deposit", "input_args": []}, {"description": "Approve eETH to ether.fi", "to": "0x35fA164735182de50811E8e2E824cFb9B6118ac2", "value": "0", "function_name": "approve", "input_args": ["0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "eETHAmount"]}, {"description": "Wrap eETH into weETH", "to": "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "value": "0", "function_name": "wrap", "input_args": ["eETHAmount"]}, {"description": "Approve weETH to ether.fi", "to": "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "value": "0", "function_name": "approve", "input_args": ["0xa3A7B6F88361F48403514059F1F16C8E78d60EeC", "weETHAmount"]}, {"description": "Bridge weETH to Arbitrum One", "to": "0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef", "value": "gasLimit * maxFeePerGas + maxSubmissionCost", "function_name": "outboundTransfer", "input_args": ["0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "arbAddr", "amount", "gasLimit", "maxFeePerGas", "calldata"]}]}
{"case_id": "orbit_points", "description": "Orbit Points Case", "steps": [{"description": "Use oETH to enter market", "to": "0x1E18C3cb491D908241D0db14b081B51be7B6e652", "value": "0", "function_name": "enterMarkets", "input_args": ["0x0872b71EFC37CB8DdE22B2118De3d800427fdba0"]}, {"description": "Supply initial ETH to mint oETH", "to": "0x0872b71EFC37CB8DdE22B2118De3d800427fdba0", "value": "ethInputAmount", "function_name": "mint", "input_args": []}, {"description": "Borrow ETH by 65% rate", "to": "0x0872b71EFC37CB8DdE22B2118De3d800427fdba0", "value": "0", "function_name": "borrow", "input_args": ["borrowAmount"]}]}
{"case_id": "balancer_aura", "description": "Balancer and Aura integration for liquidity provision and staking.", "steps": [{"description": "Swap ETH to USDC", "to": "0xaf88d065e77c8cC2239327C5EDb3A432268e5831", "value": "calculated_value", "function_name": "swapTx", "input_args": ["42161", "userAddress", "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "ETH", "18", "srcAmount", "0xaf88d065e77c8cC2239327C5EDb3A432268e5831", "USDC", "6"]}, {"description": "Swap ETH to DAI", "to": "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1", "value": "calculated_value", "function_name": "swapTx", "input_args": ["42161", "userAddress", "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "ETH", "18", "srcAmount", "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1", "DAI", "18"]}, {"description": "Swap ETH to USDT", "to": "TokenAddress.Arbitrum.USDT", "value": "calculated_value", "function_name": "swapTx", "input_args": ["42161", "userAddress", "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "ETH", "18", "srcAmount", "TokenAddress.Arbitrum.USDT", "USDT", "6"]}, {"description": "Swap ETH to USDC.e", "to": "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8", "value": "calculated_value", "function_name": "swapTx", "input_args": ["42161", "userAddress", "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "ETH", "18", "srcAmount", "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8", "USDC.e", "6"]}, {"description": "Approve USDC for Balancer", "to": "0xBA12222222228d8Ba445958a75a0704d566BF2C8", "value": "0", "function_name": "approveERC20TxIfNeeded", "input_args": ["context.chain", "userAddress", "0xaf88d065e77c8cC2239327C5EDb3A432268e5831", "USDC", "6", "0xBA12222222228d8Ba445958a75a0704d566BF2C8", "Balancer", "dstAmounts[0]"]}, {"description": "Approve DAI for Balancer", "to": "0xBA12222222228d8Ba445958a75a0704d566BF2C8", "value": "0", "function_name": "approveERC20TxIfNeeded", "input_args": ["context.chain", "userAddress", "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1", "DAI", "18", "0xBA12222222228d8Ba445958a75a0704d566BF2C8", "Balancer", "dstAmounts[1]"]}, {"description": "Approve USDT for Balancer", "to": "0xBA12222222228d8Ba445958a75a0704d566BF2C8", "value": "0", "function_name": "approveERC20TxIfNeeded", "input_args": ["context.chain", "userAddress", "TokenAddress.Arbitrum.USDT", "USDT", "6", "0xBA12222222228d8Ba445958a75a0704d566BF2C8", "Balancer", "dstAmounts[2]"]}, {"description": "Approve USDC.e for Balancer", "to": "0xBA12222222228d8Ba445958a75a0704d566BF2C8", "value": "0", "function_name": "approveERC20TxIfNeeded", "input_args": ["context.chain", "userAddress", "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8", "USDC.e", "6", "0xBA12222222228d8Ba445958a75a0704d566BF2C8", "Balancer", "dstAmounts[3]"]}, {"description": "Join Balancer Pool", "to": "0xBA12222222228d8Ba445958a75a0704d566BF2C8", "value": "0", "function_name": "joinPoolTx", "input_args": ["context.chain", "0x423a1323c871abc9d89eb06855bf5347048fc4a5000000000000000000000496", "userAddress", "[0x423A1323c871aBC9d89EB06855bF5347048Fc4A5, 0xaf88d065e77c8cC2239327C5EDb3A432268e5831, 0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1, TokenAddress.Arbitrum.USDT, 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8]", "[0n, dstAmounts]", "userData", "false"]}, {"description": "Approve BPT for Aura", "to": "0x98Ef32edd24e2c92525E59afc4475C1242a30184", "value": "0", "function_name": "approveERC20TxIfNeeded", "input_args": ["context.chain", "userAddress", "0x423A1323c871aBC9d89EB06855bF5347048Fc4A5", "4POOL-BPT", "18", "0x98Ef32edd24e2c92525E59afc4475C1242a30184", "Aura", "bptOutAmount"]}, {"description": "Deposit BPT into Aura", "to": "0x98Ef32edd24e2c92525E59afc4475C1242a30184", "value": "0", "function_name": "depositTx", "input_args": ["context.chain", "28n", "18", "4POOL-BPT", "bptOutAmount"]}]}
{"case_id": "arbitrum_to_polygon_yearn_v3_usdt", "description": "Bridge USDT from Arbitrum to Polygon and deposit to Yearn V3", "steps": [{"description": "Approve USDT for Stargate on Arbitrum", "to": "0xcE8CcA271Ebc0533920C83d39F417ED6A0abB7D0", "value": "0", "function_name": "approve", "input_args": ["TokenAddress.Arbitrum.USDT", "inputAmount"]}, {"description": "Bridge USDT from Arbitrum to Polygon via Stargate", "to": "0xcE8CcA271Ebc0533920C83d39F417ED6A0abB7D0", "value": "inputAmount", "function_name": "bridge", "input_args": ["TokenAddress.Arbitrum.USDT", "inputAmount", "predefinedConfigs.mainnet.polygon.composer", "dstEid", "BridgeMode.taxi", "sendParam.composeMsg", "estimateGasLimit"]}, {"description": "Deposit bridged USDT to Yearn V3 on Polygon", "to": "0xBb287E6017d3DEb0e2E65061e8684eab21060123", "value": "minimumReceivedAmount", "function_name": "deposit", "input_args": ["minimumReceivedAmount"]}]}
{"case_id": "gamma_yearn", "description": "Gamma Yearn Case", "steps": [{"description": "Approve WETH for 1inch Router", "to": "0x1inchRouterAddress", "value": "0", "function_name": "approve", "input_args": ["wethAddr", "wethAmount"]}, {"description": "Swap WETH to USDC.e", "to": "0x1inchRouterAddress", "value": "0", "function_name": "swap", "input_args": ["wethAddr", "usdceAddr", "usdceInvestAmountInWETH"]}, {"description": "Approve USDC.e for Gamma Vault", "to": "0xGammaVaultAddress", "value": "0", "function_name": "approve", "input_args": ["usdceAddr", "usdceAmountNeeded"]}, {"description": "Approve WETH for Gamma Vault", "to": "0xGammaVaultAddress", "value": "0", "function_name": "approve", "input_args": ["wethAddr", "wethInvestAmount"]}, {"description": "Deposit to Gamma Vault", "to": "0xGammaVaultAddress", "value": "0", "function_name": "deposit", "input_args": ["usdceAddr", "usdceAmountNeeded", "wethAddr", "wethInvestAmount"]}, {"description": "Approve aUSDC-WETH for Yearn v3", "to": "0xYearnVaultAddress", "value": "0", "function_name": "approve", "input_args": ["lpTokenAddr", "safeShares"]}, {"description": "Deposit aUSDC-WETH to Yearn v3", "to": "0xYearnVaultAddress", "value": "0", "function_name": "deposit", "input_args": ["lpTokenAddr", "safeShares"]}]}
{"case_id": "gmx_delta_neutral_strategy", "description": "GMX Delta Neutral Strategy", "steps": [{"description": "short order using ETH on GMX", "to": "exchangeRouterAddr", "value": "ETH Amount", "function_name": "createShortOrderTx", "input_args": ["chain", "userAddr", "inputAmount"]}]}
{"case_id": "pendle_usde", "description": "Purchase USDe and provide liquidity on Pendle using ETH.", "steps": [{"description": "Swap ETH to USDe using 1inch.", "to": "0x5d3a1Ff2b6BAb83b63cd9AD0787074081a52ef34", "value": "inputAmount", "function_name": "swap", "input_args": ["chainId", "userAddress", "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "ETH", "18", "inputAmount", "0x5d3a1Ff2b6BAb83b63cd9AD0787074081a52ef34", "USDe", "usdeDecimals"]}, {"description": "Approve USDe to Pendle if necessary.", "to": "0x5d3a1Ff2b6BAb83b63cd9AD0787074081a52ef34", "value": "0", "function_name": "approve", "input_args": ["pendleTxInfo.routerAddress", "estimateUsdeAmount"]}, {"description": "Provide liquidity to PT/SY pool on Pendle.", "to": "0x888888888889758F76e7103c6CbF23ABbF58F946", "value": "estimateUsdeAmount", "function_name": "addLiquiditySingleToken", "input_args": ["context.chain", "userAddress", "pendleUsdeMarketAddr", "0x5d3a1Ff2b6BAb83b63cd9AD0787074081a52ef34", "estimateUsdeAmount", "0.002"]}]}
{"case_id": "pendle_weETH", "description": "Provide liquidity to PT/SY pool on Pendle using weETH", "steps": [{"description": "Approve weETH for spending if needed", "to": "0x35751007a407ca6FEFfE80b3cB397736D2cf4dbe", "value": "0", "function_name": "approveERC20TxIfNeeded", "input_args": ["chain", "userAddress", "weETHAddr", "weETHSymbol", "weETHDecimals", "depositTxInfo.routerAddress", "Pendle", "inputAmount"]}, {"description": "Provide liquidity to PT/SY pool on Pendle", "to": "0x888888888889758F76e7103c6CbF23ABbF58F946", "value": "inputAmount", "function_name": "addLiquiditySingleTokenData", "input_args": ["chain", "userAddress", "pendleEETHMarketAddr", "weETHAddr", "inputAmount", "0.002"]}]}
{"case_id": "gauntlet_dai_core", "description": "Gauntlet DAI Core case involving staking DAI into the Morpho vault.", "steps": [{"description": "Transfer DAI to Ethereum Bundler V2", "to": "ethereumBundlerV2", "value": "inputAmount", "function_name": "transferTx", "input_args": ["userAddress", "ethereumBundlerV2", "inputTokenSymbol", "inputTokenAddr", "inputAmount", "daiDecimals"]}, {"description": "Deposit DAI into Morpho Vault", "to": "morphoVault", "value": "0", "function_name": "wrapToMulticallTx", "input_args": ["depositCallData", "0n", "inputTokenSymbol", "inputAmount", "daiDecimals", "vaultName"]}]}
{"case_id": "morpho_gauntlet_weth_prime", "description": "Gauntlet WETH Prime staking case on Morpho platform", "steps": [{"description": "Deposit ETH into Morpho Vault", "to": "0x2371e134e3455e0593363cBF89d3b6cf53740618", "value": "inputAmount", "function_name": "depositEthMulticallTx", "input_args": ["chain", "inputAmount", "morphoVault", "vaultName", "userAddress"]}]}
{"case_id": "morpho_leadblock_usdc_rwa", "description": "LeadBlock USDC RWA case for staking USDC in Morpho Vault", "steps": [{"description": "Transfer USDC to Ethereum Bundler V2", "to": "ethereumBundlerV2", "value": "inputAmount", "function_name": "transferTx", "input_args": ["userAddress", "ethereumBundlerV2", "inputTokenSymbol", "inputTokenAddr", "inputAmount", "usdcDecimals"]}, {"description": "Deposit USDC into Morpho Vault", "to": "morphoVault", "value": "0", "function_name": "wrapToMulticallTx", "input_args": ["depositCallData", "0n", "inputTokenSymbol", "inputAmount", "usdcDecimals", "vaultName"]}]}
{"case_id": "morpho_re7_usdt", "description": "Stake USDT in Morpho's Re7 USDT vault to earn APY.", "steps": [{"description": "Transfer USDT to Ethereum Bundler V2", "to": "ethereumBundlerV2", "value": "inputAmount", "function_name": "transferTx", "input_args": ["userAddress", "ethereumBundlerV2", "inputTokenSymbol", "inputTokenAddr", "inputAmount", "usdtDecimals"]}, {"description": "Deposit USDT into Morpho Vault", "to": "morphoVault", "value": "0", "function_name": "wrapToMulticallTx", "input_args": ["calldatas", "0n", "inputToken", "vaultName"]}]}
{"case_id": "morpho_re7_weth", "description": "Stake ETH into the Morpho Re7 WETH vault to earn APY.", "steps": [{"description": "Deposit ETH into the Morpho Re7 WETH vault.", "to": "0x78Fc2c2eD1A4cDb5402365934aE5648aDAd094d0", "value": "inputAmount", "function_name": "depositEthMulticallTx", "input_args": ["chain", "inputAmount", "morphoVault", "vaultName", "userAddress"]}]}
{"case_id": "gauntlet_usdt_prime", "description": "Gauntlet USDT Prime case for staking USDT in Morpho Vault", "steps": [{"description": "Transfer USDT to Ethereum Bundler V2", "to": "ethereumBundlerV2", "value": "inputAmount", "function_name": "transferTx", "input_args": ["userAddress", "ethereumBundlerV2", "inputTokenSymbol", "inputTokenAddr", "inputAmount", "usdtDecimals"]}, {"description": "Deposit USDT into Morpho Vault", "to": "morphoVault", "value": "0", "function_name": "wrapToMulticallTx", "input_args": ["depositCallData", "0n", "inputTokenSymbol", "inputAmount", "usdtDecimals", "vaultName"]}]}
{"case_id": "morpho_gauntlet_lrt_core", "description": "Gauntlet LRT Core staking case on Morpho platform", "steps": [{"description": "Deposit ETH into Morpho Vault", "to": "0x4881Ef0BF6d2365D3dd6499ccd7532bcdBCE0658", "value": "inputAmount", "function_name": "depositEthMulticallTx", "input_args": ["chain", "inputAmount", "morphoVault", "vaultName", "userAddress"]}]}
{"case_id": "merlin_solvBTC_avalon", "description": "A case for supplying BTC to Avalon via SolvBTC and MerlinSwap protocols.", "steps": [{"description": "Wrap BTC to WBTC", "to": "MerlinSwapAddr", "value": "btcAmount", "function_name": "wrapBTC", "input_args": ["btcAmount"]}, {"description": "Approve WBTC for MerlinSwap", "to": "MerlinSwapAddr", "value": "btcAmount", "function_name": "approveERC20Tx", "input_args": ["WBTCAddr", "WBTC", "18", "MerlinSwapAddr", "MerlinSwap", "btcAmount"]}, {"description": "Swap WBTC to M-BTC", "to": "MerlinSwapAddr", "value": "btcAmount", "function_name": "swapTx", "input_args": ["userAddress", "WBTCAddr", "WBTC", "18", "btcAmount", "MBTCAddr", "M-BTC", "18", "0.015"]}, {"description": "Approve M-BTC for SolvBTC", "to": "SolvBTCAddr", "value": "swapAmount", "function_name": "approveERC20Tx", "input_args": ["MBTCAddr", "M-BTC", "18", "SolvBTCAddr", "SolvBTC", "swapAmount"]}, {"description": "Stake M-BTC to SolvBTC", "to": "SolvBTCAddr", "value": "swapAmount", "function_name": "solvBTCTx", "input_args": ["swapAmount"]}, {"description": "Approve SolvBTC for Avalon", "to": "AvalonPoolAddr", "value": "swapAmount", "function_name": "approveERC20Tx", "input_args": ["SolvBTCToken", "SolvBTC", "18", "AvalonPoolAddr", "Avalon", "swapAmount"]}, {"description": "Supply SolvBTC to Avalon", "to": "AvalonPoolAddr", "value": "swapAmount", "function_name": "avalonSupplyTx", "input_args": ["userAddress", "SolvBTCToken", "swapAmount"]}]}
{"case_id": "scroll_airdrop_hunting_rookie", "description": "A series of transactions to swap, wrap, and unwrap USDC and ETH on the Scroll chain, utilizing Ambient protocol.", "steps": [{"description": "Approve USDC to Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "0", "function_name": "approveUSDCToAmbient", "input_args": ["inputUSDCAmount"]}, {"description": "Swap USDC to ETH on Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "0", "function_name": "swapUSDCToETHByAmbient", "input_args": ["inputUSDCAmount"]}, {"description": "Wrap ETH to WETH", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "wrapETH", "input_args": ["ethMinOut"]}, {"description": "Unwrap WETH to ETH", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "unwrapETH", "input_args": ["ethMinOut"]}, {"description": "Swap ETH to USDC on Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "0", "function_name": "swapETHToUSDCByAmbient", "input_args": ["ethMinOut"]}]}
{"case_id": "scroll_airdrop_hunting_with_penpad", "description": "A series of transactions to swap ETH to USDC, then swap to ETH, and finally stake ETH on Penpad.", "steps": [{"description": "Swap ETH to USDC on Scroll using Syncswap", "to": "0x80e38291e06339d10AAB483C65695D004dBD5C69", "value": "ETH Amount", "function_name": "swap", "input_args": ["paths", "amountOutMin", "deadline"]}, {"description": "Approve USDC to KyberSwap", "to": "0x6131B5fae19EA4f9D964eAc0408E4408b66337b5", "value": "0", "function_name": "approve", "input_args": ["usdcAddress", "routerAddress", "amount"]}, {"description": "Swap 50% USDC to ETH on KyberSwap", "to": "0x6131B5fae19EA4f9D964eAc0408E4408b66337b5", "value": "0", "function_name": "swap", "input_args": ["routeData"]}, {"description": "Approve USDC to SpaceFi", "to": "0x18b71386418A9FCa5Ae7165E31c385a5130011b6", "value": "0", "function_name": "approve", "input_args": ["usdcAddress", "spacefiRouterAddress", "amount"]}, {"description": "Swap 50% USDC to ETH on Scroll using SpaceFi", "to": "0x18b71386418A9FCa5Ae7165E31c385a5130011b6", "value": "0", "function_name": "swapExactTokensForETH", "input_args": ["amountIn", "amountOutMin", "[usdcAddress, wETHAddress]", "userAddress", "deadline"]}, {"description": "Deposit ETH to Penpad", "to": "0x8F53fA7928305Fd4f78c12BA9d9DE6B2420A2188", "value": "ETH Amount", "function_name": "stake", "input_args": []}]}
{"case_id": "scroll_airdrop_hunting_professional", "description": "A series of transactions to swap, wrap, unwrap, lend, and borrow using USDC, ETH, WETH, DAI, and USDT on the Scroll chain.", "steps": [{"description": "Approve USDC to Ambient", "to": "0x...", "value": "0", "function_name": "approveUSDCToAmbient", "input_args": ["inputUSDCAmount"]}, {"description": "Swap USDC to ETH on Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "0", "function_name": "swapUSDCToETHByAmbient", "input_args": ["inputUSDCAmount"]}, {"description": "Wrap ETH to WETH", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "wrapETH", "input_args": ["ethMinOut"]}, {"description": "Approve WETH to Cog Finance (USDC/WETH)", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "approveWETHToCogPairUSDCWETH", "input_args": ["ethMinOut"]}, {"description": "Add WETH as collateral to Cog Finance (USDC/WETH)", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "0", "function_name": "addWETHToCogUSDCWETHCollateral", "input_args": ["userAddress", "ethMinOut"]}, {"description": "Borrow USDC from Cog Finance (USDC/WETH)", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "0", "function_name": "borrowUSDCFromCog", "input_args": ["client", "userAddress", "usdcBorrowAmount"]}, {"description": "Approve USDC to Cog Finance (USDC/WETH)", "to": "0x...", "value": "0", "function_name": "approveUSDCToCogPairUSDCWETH", "input_args": ["(usdcBorrowAmount * BigInt(1001)) / BigInt(1000)"]}, {"description": "Repay USDC to Cog Finance (USDC/WETH)", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "0", "function_name": "repayUSDCToCog", "input_args": ["repayUSDCAmount"]}, {"description": "Remove WETH Collateral (USDC/WETH) from Cog Finance", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "0", "function_name": "removeUSDCWETHCollateralFromCog", "input_args": ["withdrawWETHAmountFromUSDCWETH", "userAddress"]}, {"description": "Approve WETH to Cog Finance (DAI/WETH)", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "approveWETHToCogPairDAIWETH", "input_args": ["withdrawWETHAmountFromUSDCWETH"]}, {"description": "Add WETH as collateral to Cog Finance (DAI/WETH)", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "0", "function_name": "addWETHToCogDAIWETHCollateral", "input_args": ["userAddress", "withdrawWETHAmountFromUSDCWETH"]}, {"description": "Borrow DAI from Cog Finance (DAI/WETH)", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "0", "function_name": "borrowDAIFromCog", "input_args": ["client", "userAddress", "daiBorrowAmount"]}, {"description": "Approve DAI to Cog Finance (DAI/WETH)", "to": "0xcA77eB3fEFe3725Dc33bccB54eDEFc3D9f764f97", "value": "0", "function_name": "approveDAIToCogPairDAIWETH", "input_args": ["daiBorrowAmount"]}, {"description": "Repay DAI to Cog Finance (DAI/WETH)", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "0", "function_name": "repayDAIToCog", "input_args": ["repayDAIAmount"]}, {"description": "Remove WETH Collateral (DAI/WETH) from Cog Finance", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "0", "function_name": "removeDAIWETHCollateralFromCog", "input_args": ["withdrawWETHAmountFromDAIWETH", "userAddress"]}, {"description": "Approve WETH to Cog Finance (USDT/WETH)", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "approveWETHToCogPairUSDTWETH", "input_args": ["withdrawWETHAmountFromDAIWETH"]}, {"description": "Add WETH as collateral to Cog Finance (USDT/WETH)", "to": "0x4Ac126e5dd1Cd496203a7E703495cAa8112A20cA", "value": "0", "function_name": "addWETHToCogUSDTWETHCollateral", "input_args": ["userAddress", "withdrawWETHAmountFromDAIWETH"]}, {"description": "Borrow USDT from Cog Finance (USDT/WETH)", "to": "0x4Ac126e5dd1Cd496203a7E703495cAa8112A20cA", "value": "0", "function_name": "borrowUSDTFromCog", "input_args": ["client", "userAddress", "usdtBorrowAmount"]}, {"description": "Approve USDT to Cog Finance (USDT/WETH)", "to": "0xf55BEC9cafDbE8730f096Aa55dad6D22d44099Df", "value": "0", "function_name": "approveUSDTToCogPairUSDTWETH", "input_args": ["usdtBorrowAmount"]}, {"description": "Repay USDT to Cog Finance (USDT/WETH)", "to": "0x4Ac126e5dd1Cd496203a7E703495cAa8112A20cA", "value": "0", "function_name": "repayUSDTToCog", "input_args": ["repayUSDTAmount"]}, {"description": "Remove WETH Collateral (USDT/WETH) from Cog Finance", "to": "0x4Ac126e5dd1Cd496203a7E703495cAa8112A20cA", "value": "0", "function_name": "removeUSDTWETHCollateralFromCog", "input_args": ["withdrawWETHAmountFromUSDTWETH", "userAddress"]}, {"description": "Unwrap WETH to ETH", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "unwrapETH", "input_args": ["withdrawWETHAmountFromUSDTWETH"]}, {"description": "Swap ETH to USDC on Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "0", "function_name": "swapETHToUSDCByAmbient", "input_args": ["withdrawWETHAmountFromUSDTWETH"]}]}
{"case_id": "scroll_airdrop_hunting_advanced", "description": "A series of transactions to swap, wrap, unwrap, lend, and borrow using USDC, ETH, WETH, DAI, and Cog Finance on the Scroll chain.", "steps": [{"description": "Approve USDC to Ambient", "to": "0xTokenAddress.Scroll.USDC", "value": "0", "function_name": "approveUSDCToAmbient", "input_args": ["inputUSDCAmount"]}, {"description": "Swap USDC to ETH on Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "0", "function_name": "swapUSDCToETHByAmbient", "input_args": ["inputUSDCAmount"]}, {"description": "Wrap ETH to WETH", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "wrapETH", "input_args": ["ethMinOut"]}, {"description": "Approve WETH to Cog Finance", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "approveWETHToCogPairUSDCWETH", "input_args": ["ethMinOut"]}, {"description": "Add WETH as collateral to Cog Finance", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "0", "function_name": "addWETHToCogUSDCWETHCollateral", "input_args": ["userAddress", "ethMinOut"]}, {"description": "Borrow USDC from Cog Finance", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "0", "function_name": "borrowUSDCFromCog", "input_args": ["client", "userAddress", "usdcBorrowAmount"]}, {"description": "Approve USDC to Cog Finance", "to": "0xTokenAddress.Scroll.USDC", "value": "0", "function_name": "approveUSDCToCogPairUSDCWETH", "input_args": ["(usdcBorrowAmount * BigInt(1001)) / BigInt(1000)"]}, {"description": "Repay USDC to Cog Finance", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "0", "function_name": "repayUSDCToCog", "input_args": ["repayUSDCAmount"]}, {"description": "Remove WETH Collateral (USDC) from Cog Finance", "to": "0x63fdafa50c09c49f594f47ea7194b721291ec50f", "value": "0", "function_name": "removeUSDCWETHCollateralFromCog", "input_args": ["withdrawWETHAmountFromUSDCWETH", "userAddress"]}, {"description": "Approve WETH to Cog Finance", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "approveWETHToCogPairDAIWETH", "input_args": ["withdrawWETHAmountFromUSDCWETH"]}, {"description": "Add WETH as collateral to Cog Finance", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "0", "function_name": "addWETHToCogDAIWETHCollateral", "input_args": ["userAddress", "withdrawWETHAmountFromUSDCWETH"]}, {"description": "Borrow DAI from Cog Finance", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "0", "function_name": "borrowDAIFromCog", "input_args": ["client", "userAddress", "daiBorrowAmount"]}, {"description": "Approve DAI to Cog Finance", "to": "0xcA77eB3fEFe3725Dc33bccB54eDEFc3D9f764f97", "value": "0", "function_name": "approveDAIToCogPairDAIWETH", "input_args": ["daiBorrowAmount"]}, {"description": "Repay DAI to Cog Finance", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "0", "function_name": "repayDAIToCog", "input_args": ["repayDAIAmount"]}, {"description": "Remove WETH Collateral (DAI) from Cog Finance", "to": "0x43187A6052A4BF10912CDe2c2f94953e39FcE8c7", "value": "0", "function_name": "removeDAIWETHCollateralFromCog", "input_args": ["withdrawWETHAmountFromDAIWETH", "userAddress"]}, {"description": "Unwrap WETH to ETH", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "unwrapETH", "input_args": ["withdrawWETHAmountFromDAIWETH"]}, {"description": "Swap ETH to USDC on Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "0", "function_name": "swapETHToUSDCByAmbient", "input_args": ["withdrawWETHAmountFromDAIWETH"]}]}
{"case_id": "merlin_solvBTC_mage", "description": "A case to wrap BTC, approve WBTC, swap to M-BTC, stake M-BTC to SolvBTC, and then stake SolvBTC to Mage.", "steps": [{"description": "Wrap BTC", "to": "wrapBTC", "value": "btcAmount", "function_name": "wrapBTC", "input_args": ["btcAmount"]}, {"description": "Approve WBTC", "to": "MerlinSwapAddr", "value": "btcAmount", "function_name": "approveERC20Tx", "input_args": ["WBTCAddr", "WBTC", "18", "MerlinSwapAddr", "MerlinSwap", "btcAmount"]}, {"description": "Swap WBTC to M-BTC", "to": "swapTx", "value": "btcAmount", "function_name": "swapTx", "input_args": ["userAddress", "WBTCAddr", "WBTC", "18", "btcAmount", "MBTCAddr", "M-BTC", "18", "0.015"]}, {"description": "Approve M-BTC", "to": "SolvBTCAddr", "value": "swapAmount", "function_name": "approveERC20Tx", "input_args": ["MBTCAddr", "M-BTC", "18", "SolvBTCAddr", "SolvBTC", "swapAmount"]}, {"description": "Stake M-BTC to SolvBTC", "to": "solvBTCTx", "value": "swapAmount", "function_name": "solvBTCTx", "input_args": ["swapAmount"]}, {"description": "Approve SolvBTC", "to": "MageSolvBTCAddr", "value": "swapAmount", "function_name": "approveERC20Tx", "input_args": ["SolvBTCToken", "SolvBTC", "18", "MageSolvBTCAddr", "Mage", "swapAmount"]}, {"description": "Stake SolvBTC to Mage", "to": "mageSolvBTCTx", "value": "swapAmount", "function_name": "mageSolvBTCTx", "input_args": ["swapAmount"]}]}
{"case_id": "pendle_points", "description": "Pendle Points Case", "steps": [{"description": "Swap ETH to YT rsETH", "to": "0x4186BFC76E2E237523CBC30FD220FE055156b41F", "value": "ETH Amount", "function_name": "swapExactToken", "input_args": ["PendleOutputType.Yt", "pendleContext", "{ tokenInName: 'ETH', outputTokenName: 'YT rsETH' }"]}, {"description": "Swap ETH to YT ezETH", "to": "0x2416092f143378750bb29b79eD961ab195CcEea5", "value": "ETH Amount", "function_name": "swapExactToken", "input_args": ["PendleOutputType.Yt", "pendleContext", "{ tokenInName: 'ETH', outputTokenName: 'YT ezETH' }"]}]}
{"case_id": "yearn_withdrawal", "description": "Yearn Withdrawal Case", "steps": [{"description": "Withdraw yvDAI-A to DAI from Yearn", "to": "0x90b2f54C6aDDAD41b8f6c4fCCd555197BC0F773B", "value": "0", "function_name": "redeem", "input_args": ["fromAmount", "context.account.address", "context.account.address", "1"]}, {"description": "Withdraw yvUSDC-A to USDC.e from Yearn", "to": "0xA013Fbd4b711f9ded6fB09C1c0d358E2FbC2EAA0", "value": "0", "function_name": "redeem", "input_args": ["fromAmount", "context.account.address", "context.account.address", "1"]}, {"description": "Withdraw yvUSDT-A to USDT from Yearn", "to": "0xBb287E6017d3DEb0e2E65061e8684eab21060123", "value": "0", "function_name": "redeem", "input_args": ["fromAmount", "context.account.address", "context.account.address", "1"]}, {"description": "Withdraw yvWETH-A to WETH from Yearn", "to": "0x305F25377d0a39091e99B975558b1bdfC3975654", "value": "0", "function_name": "redeem", "input_args": ["fromAmount", "context.account.address", "context.account.address", "1"]}]}
{"case_id": "bridge_eth_ethereum_optimism", "description": "Bridge ETH from Ethereum to Optimism", "steps": [{"description": "Bridge ETH from Ethereum to Optimism", "to": "0x77b2043768d28E9C9aB44E1aBfC95944bcE57931", "value": "amount in ETH", "function_name": "bridgeTx", "input_args": ["mainnet", "ETH", "18", "Ethereum", "Optimism", "0x77b2043768d28E9C9aB44E1aBfC95944bcE57931", "userAddress", "toAddr", "amount", "30111n", "BridgeMode.bus"]}]}
{"case_id": "zircuit_rsweth", "description": "Stake ETH to rswETH and deposit to Zircuit", "steps": [{"description": "Wrap ETH to rswETH", "to": "0xFAe103DC9cf190eD75350761e95403b7b8aFa6c0", "value": "ETH Amount", "function_name": "depositWithReferral", "input_args": ["ReferalAccount"]}, {"description": "Approve rswETH to Zircuit", "to": "0xFAe103DC9cf190eD75350761e95403b7b8aFa6c0", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "estimateRSWETHAmount"]}, {"description": "Deposit rswETH to Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0xFAe103DC9cf190eD75350761e95403b7b8aFa6c0", "context.account.address", "estimateRSWETHAmount"]}]}
{"case_id": "etf_ethereum_top10", "description": "Swap USDT to top 10 Ethereum tokens using 1inch", "steps": [{"description": "Check USDT allowance for 1inch", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "0", "function_name": "allowance", "input_args": ["userAddress", "0xdac17f958d2ee523a2206206994597c13d831ec7", "0x111111125421ca6dc452d289314280a0f8842a65"]}, {"description": "Approve USDT for 1inch if allowance is insufficient", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "0", "function_name": "approve", "input_args": ["0xdac17f958d2ee523a2206206994597c13d831ec7", "0x111111125421ca6dc452d289314280a0f8842a65", "usdtAmount"]}, {"description": "Swap USDT to Top1 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "0", "function_name": "swap", "input_args": ["userAddress", "0xdac17f958d2ee523a2206206994597c13d831ec7", "Top1TokenAddress", "usdtUsage"]}, {"description": "Swap USDT to Top2 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "0", "function_name": "swap", "input_args": ["userAddress", "0xdac17f958d2ee523a2206206994597c13d831ec7", "Top2TokenAddress", "usdtUsage"]}, {"description": "Swap USDT to Top3 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "0", "function_name": "swap", "input_args": ["userAddress", "0xdac17f958d2ee523a2206206994597c13d831ec7", "Top3TokenAddress", "usdtUsage"]}, {"description": "Swap USDT to Top4 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "0", "function_name": "swap", "input_args": ["userAddress", "0xdac17f958d2ee523a2206206994597c13d831ec7", "Top4TokenAddress", "usdtUsage"]}, {"description": "Swap USDT to Top5 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "0", "function_name": "swap", "input_args": ["userAddress", "0xdac17f958d2ee523a2206206994597c13d831ec7", "Top5TokenAddress", "usdtUsage"]}, {"description": "Swap USDT to Top6 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "0", "function_name": "swap", "input_args": ["userAddress", "0xdac17f958d2ee523a2206206994597c13d831ec7", "Top6TokenAddress", "usdtUsage"]}, {"description": "Swap USDT to Top7 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "0", "function_name": "swap", "input_args": ["userAddress", "0xdac17f958d2ee523a2206206994597c13d831ec7", "Top7TokenAddress", "usdtUsage"]}, {"description": "Swap USDT to Top8 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "0", "function_name": "swap", "input_args": ["userAddress", "0xdac17f958d2ee523a2206206994597c13d831ec7", "Top8TokenAddress", "usdtUsage"]}, {"description": "Swap USDT to Top9 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "0", "function_name": "swap", "input_args": ["userAddress", "0xdac17f958d2ee523a2206206994597c13d831ec7", "Top9TokenAddress", "usdtUsage"]}, {"description": "Swap USDT to Top10 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "0", "function_name": "swap", "input_args": ["userAddress", "0xdac17f958d2ee523a2206206994597c13d831ec7", "Top10TokenAddress", "usdtUsage"]}]}
{"case_id": "lido_multiplier_withdraw", "description": "Repay debt using wstETH collateral and swap wstETH to ETH.", "steps": [{"description": "Withdraw wstETH from AAVE.", "to": "userAddress", "value": "withdrawAmount", "function_name": "withdrawTx", "input_args": ["wstETHAddr", "wstETH", "withdrawAmount", "userAddress"]}, {"description": "Approve 1inch to spend wstETH.", "to": "oneInchAddress", "value": "approveSum", "function_name": "approveERC20Tx", "input_args": ["wstETHAddr", "wstETH", "18", "oneInchAddress", "1inch", "approveSum"]}, {"description": "Swap wstETH to ETH using 1inch.", "to": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "value": "withdrawAmount", "function_name": "swapTx", "input_args": ["1", "userAddress", "wstETHAddr", "wstETH", "18", "withdrawAmount", "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "ETH", "18", "1"]}, {"description": "Repay ETH debt on AAVE.", "to": "userAddress", "value": "repayAmount", "function_name": "repayETHTx", "input_args": ["repayAmount", "userAddress"]}]}
{"case_id": "aerodrome_degen_liquidity", "description": "Provide liquidity on Aerodrome using ETH and DEGEN tokens, then start farming.", "steps": [{"description": "Swap from ETH to DEGEN", "to": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "value": "0", "function_name": "swap", "input_args": ["chainId", "userAddress", "srcTokenAddress", "srcTokenSymbol", "srcTokenDecimals", "srcAmount", "dstTokenAddress", "dstTokenSymbol", "dstTokenDecimals"]}, {"description": "Wrap ETH to WETH", "to": "0x4200000000000000000000000000000000000006", "value": "ethAmountToDeposit", "function_name": "deposit", "input_args": []}, {"description": "Approve WETH for providing liquidity", "to": "0x4200000000000000000000000000000000000006", "value": "0", "function_name": "approve", "input_args": ["aerodromeRouterAddr", "ethAmountToDeposit"]}, {"description": "Approve DEGEN for providing liquidity", "to": "degenAddr", "value": "0", "function_name": "approve", "input_args": ["aerodromeRouterAddr", "degenAmountToDeposit"]}, {"description": "Provide WETH and DEGEN liquidity on Aerodrome", "to": "0xcF77a3Ba9A5CA399B7c97c74d54e5b1Beb874E43", "value": "0", "function_name": "addLiquidity", "input_args": ["wETHAddr", "degenAddr", "false", "ethAmountToDeposit", "degenAmountToDeposit", "(ethAmountToDeposit * BigInt(992)) / BigInt(1000)", "(degenAmountToDeposit * BigInt(992)) / BigInt(1000)", "context.account.address", "deadline"]}, {"description": "Approve LP Token(vAMM-WETH/DEGEN) for farming", "to": "0x2C4909355b0C036840819484c3A882A95659aBf3", "value": "0", "function_name": "approve", "input_args": ["aerodromeGaugeAddr", "estimatedLiquidity"]}, {"description": "Deposit LP token(vAMM-WETH/DEGEN) and start farming", "to": "0x86a1260ab9f758026ce1a5830bdff66dbcf736d5", "value": "0", "function_name": "deposit", "input_args": ["lpTokenAmount"]}]}
{"case_id": "rho_supply", "description": "Supply STONE tokens to Rho Markets", "steps": [{"description": "Swap ETH for STONE", "to": "0x80137510979822322193FC997d400D5A6C747bf7", "value": "amount in ETH", "function_name": "swapTx", "input_args": ["chain", "ethAddr", "ETH", "18", "amount", "stoneAddr", "STONE", "18"]}, {"description": "Approve STONE for Rho Markets if needed", "to": "0xAD3d07d431B85B525D81372802504Fa18DBd554c", "value": "quoteAmount in STONE", "function_name": "approveERC20TxIfNeeded", "input_args": ["chain", "userAddress", "stoneAddr", "STONE", "18", "rStoneAddr", "Rho Markets", "quoteAmount"]}, {"description": "Supply STONE to Rho Markets", "to": "0xAD3d07d431B85B525D81372802504Fa18DBd554c", "value": "quoteAmount in STONE", "function_name": "supplyErc20Tx", "input_args": ["rStoneAddr", "STONE", "18", "quoteAmount"]}]}
{"case_id": "rho_withdraw", "description": "Withdraw rSTONE and swap to ETH", "steps": [{"description": "Redeem rSTONE for STONE", "to": "0xAD3d07d431B85B525D81372802504Fa18DBd554c", "value": "0", "function_name": "redeemErc20Tx", "input_args": ["rTokenAddr: 0xAD3d07d431B85B525D81372802504Fa18DBd554c", "rTokenSymbol: rSTONE", "rTokenDecimals: 18", "rTokenAmount: amount"]}, {"description": "Approve STONE for Ambient if needed", "to": "0x80137510979822322193FC997d400D5A6C747bf7", "value": "0", "function_name": "approveERC20TxIfNeeded", "input_args": ["chain: context.chain", "userAddress: userAddress", "tokenAddress: 0x80137510979822322193FC997d400D5A6C747bf7", "tokenSymbol: STONE", "tokenDecimals: 18", "spenderAddress: crocSwapDexAddr", "spenderName: Ambient", "amount: redeemAmount"]}, {"description": "Swap STONE for ETH", "to": "0x0000000000000000000000000000000000000000", "value": "0", "function_name": "swapTx", "input_args": ["chain: context.chain", "baseAddr: 0x80137510979822322193FC997d400D5A6C747bf7", "baseSymbol: STONE", "baseDecimals: 18", "baseAmount: redeemAmount", "quoteAddr: 0x0000000000000000000000000000000000000000", "quoteSymbol: ETH", "quoteDecimals: 18"]}]}
{"case_id": "zircuit_renzo", "description": "A case for staking ETH to ezETH and then to Zircuit with potential approval step.", "steps": [{"description": "Stake ETH to ezETH", "to": "0x74a09653A083691711cF8215a6ab074BB4e99ef5", "value": "ethInputAmount", "function_name": "depositETH", "input_args": ["0x80011844928B469EAc5E4bC7e6EBA9b3C2Fa1b41"]}, {"description": "Approve ezETH for Zircuit", "to": "0xbf5495Efe5DB9ce00f80364C8B423567e58d2110", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "ezEthAmountBigInt"]}, {"description": "Stake ezETH to Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0xbf5495Efe5DB9ce00f80364C8B423567e58d2110", "context.account.address", "ezEthAmountBigInt"]}]}
{"case_id": "kelp_and_pendle", "description": "Stake ETH for ETHx on Stader, approve ETHx transfer to Kelp, deposit ETHx for rsETH on Kelp, approve rsETH transfer to Pendle, and provide liquidity to PT/SY pool on Pendle.", "steps": [{"description": "Stake ETH for ETHx on Stader", "to": "0xcf5EA1b38380f6aF39068375516Daf40Ed70D299", "value": "inputAmount", "function_name": "deposit", "input_args": ["userAddress"]}, {"description": "Approve ETHx transfer to Kelp", "to": "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b", "value": "0n", "function_name": "approve", "input_args": ["0x036676389e48133B63a802f8635AD39E752D375D", "ethxAmount"]}, {"description": "Deposit ETHx for rsETH on Kelp", "to": "0x036676389e48133B63a802f8635AD39E752D375D", "value": "0n", "function_name": "depositAsset", "input_args": ["0xA35b1B31Ce002FBF2058D22F30f95D405200A15b", "ethxAmountToDeposit", "0n", "0xa9857dbaa6f99e5a557b23d321843a48c5a5417029894f76db4c80bddab116bc"]}, {"description": "Approve rsETH transfer to Pendle", "to": "0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7", "value": "0n", "function_name": "approve", "input_args": ["pendleTxInfo.routerAddress", "rsETHAmount"]}, {"description": "Provide liquidity to PT/SY pool on Pendle", "to": "0x4f43c77872Db6BA177c270986CD30c3381AF37Ee", "value": "0n", "function_name": "addLiquiditySingleTokenData", "input_args": ["context.chain", "userAddress", "pendleRSETHMarketAddr", "rsETHAddr", "rsETHAmountToDeposit", "0.002"]}]}
{"case_id": "aave_usdc_eth", "description": "Supply USDC to AAVE as collateral and borrow ETH", "steps": [{"description": "Approve USDC for AAVE", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "approve", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "usdcAmount"]}, {"description": "Supply USDC to AAVE as collateral", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "supply", "input_args": ["0xA0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "usdcAmount", "context.account.address", "0"]}, {"description": "Disable AAVE E-Mode if it is enabled", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "setUserEMode", "input_args": ["0"]}, {"description": "Delegate borrowing power on the debt WETH if needed", "to": "0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE", "value": "0", "function_name": "approveDelegation", "input_args": ["0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "ethAmount"]}, {"description": "Borrow ETH from AAVE", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "0", "function_name": "borrowETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "ethAmount", "2", "0"]}]}
{"case_id": "aave_base_supply_eth", "description": "Supply ETH on AAVE in the Base chain", "steps": [{"description": "Approve and supply native ETH", "to": "base", "value": "variable", "function_name": "supplyNativeTokenTx", "input_args": ["chain", "tokenSymbol", "inputAmount", "onBehalfOf"]}]}
{"case_id": "aave_eth_eth_emode", "description": "Supply ETH to AAVE as collateral and borrow ETH using AAVE E-Mode.", "steps": [{"description": "Supply ETH to AAVE as collateral", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "ethAmount", "function_name": "depositETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "context.account.address", "0"]}, {"description": "Enable AAVE E-Mode if it is disabled", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "setUserEMode", "input_args": ["1"]}, {"description": "Delegate borrowing power on the debt WETH if needed", "to": "0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE", "value": "0", "function_name": "approveDelegation", "input_args": ["0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "borrowEthAmount"]}, {"description": "Borrow ETH from AAVE", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "0", "function_name": "borrowETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "borrowEthAmount", "2", "0"]}]}
{"case_id": "aave_eth_eth", "description": "Supply ETH to AAVE as collateral and borrow ETH from AAVE.", "steps": [{"description": "Supply ETH to AAVE as collateral", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "ethAmount", "function_name": "depositETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "context.account.address", "0"]}, {"description": "Disable AAVE E-Mode if it is enabled", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "setUserEMode", "input_args": ["0"]}, {"description": "Delegate borrowing power on the debt WETH if needed", "to": "0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE", "value": "0", "function_name": "approveDelegation", "input_args": ["0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "borrowEthAmount"]}, {"description": "Borrow ETH from AAVE", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "0", "function_name": "borrowETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "borrowEthAmount", "2", "0"]}]}
{"case_id": "aave_base_repay_eth", "description": "Repay ETH on AAVE protocol on Base chain", "steps": [{"description": "Approve ERC20 token if needed", "to": "AAVE", "value": "0", "function_name": "approveERC20TxIfNeeded", "input_args": ["tokenAddress", "tokenSymbol", "spenderName"]}, {"description": "Repay ERC20 token", "to": "AAVE", "value": "0", "function_name": "repayErc20TokenTx", "input_args": ["chain", "inputAmount", "tokenAddr", "tokenSymbol", "tokenDecimals", "userAddress"]}, {"description": "Repay native token", "to": "AAVE", "value": "0", "function_name": "repayNativeTokenTx", "input_args": ["chain", "inputAmount", "tokenSymbol", "tokenDecimals", "userAddress"]}]}
{"case_id": "aave_base_withdraw_eth", "description": "Withdraw ETH from AAVE on Base chain", "steps": [{"description": "Approve ERC20 token for AAVE", "to": "AAVE", "value": "0", "function_name": "approveERC20PreviewTx", "input_args": ["baseETHAssets.aTokenAddr", "baseETHAssets.aTokenSymbol", "AAVE"]}, {"description": "Withdraw native token", "to": "userAddress", "value": "inputAmount", "function_name": "withdrawNativeTokenTx", "input_args": ["base", "baseETHAssets.tokenSymbol"]}]}
{"case_id": "aave_usdt_eth", "description": "Supply USDT to AAVE as collateral and borrow ETH", "steps": [{"description": "Approve USDT for AAVE", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "approve", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "usdtAmount"]}, {"description": "Supply USDT to AAVE as collateral", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "supply", "input_args": ["TokenAddress.Mainnet.USDT", "usdtAmount", "context.account.address", "0"]}, {"description": "Disable AAVE E-Mode if enabled", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "setUserEMode", "input_args": ["0"]}, {"description": "Delegate borrowing power on the debt WETH", "to": "0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE", "value": "0", "function_name": "approveDelegation", "input_args": ["0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "ethAmount"]}, {"description": "Borrow ETH from AAVE", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "0", "function_name": "borrowETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "ethAmount", "2", "0"]}]}
{"case_id": "unstake_eth", "description": "Unstake ETH from various protocols", "steps": [{"description": "Unstake from Lido", "to": "userAddress", "value": "inputAmount", "function_name": "lidoUnstakeWSETHTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from RocketPool", "to": "userAddress", "value": "inputAmount", "function_name": "rocketpoolUnstakeTx", "input_args": ["inputAmount"]}, {"description": "Swap staked token to ETH using 1inch", "to": "userAddress", "value": "inputAmount", "function_name": "swapTx", "input_args": ["{\"chainId\": \"mainnet.id\", \"userAddress\": \"userAddress\", \"srcTokenAddress\": \"stakingProtocols[i].stakedTokenAddr\", \"srcTokenSymbol\": \"stakingProtocols[i].stakedTokenSymbol\", \"srcTokenDecimals\": 18, \"srcAmount\": \"inputAmount\", \"dstTokenAddress\": \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", \"dstTokenSymbol\": \"ETH\", \"dstTokenDecimals\": 18}"]}, {"description": "Unstake from StakeWise", "to": "userAddress", "value": "inputAmount", "function_name": "stakewiseUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from Stader", "to": "userAddress", "value": "inputAmount", "function_name": "staderUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from EtherFi", "to": "userAddress", "value": "inputAmount", "function_name": "etherFiUnstakeWEETHTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from Renzo", "to": "userAddress", "value": "inputAmount", "function_name": "renzoUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from FraxFinance", "to": "userAddress", "value": "inputAmount", "function_name": "fraxUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from Swell", "to": "userAddress", "value": "inputAmount", "function_name": "swellUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from RedactedFinance", "to": "userAddress", "value": "inputAmount", "function_name": "dineroUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}]}
{"case_id": "stake_eth", "description": "Stake ETH into various protocols", "steps": [{"description": "Stake into Lido", "to": "Lido Contract Address", "value": "inputAmount", "function_name": "stakeToLidoGetWSTETHTxs", "input_args": ["chain: mainnet", "inputAmount: inputAmount"]}, {"description": "Stake into RocketPool", "to": "RocketPool Contract Address", "value": "inputAmount", "function_name": "rocketpoolStakeTx", "input_args": ["inputAmount: inputAmount"]}, {"description": "Swap ETH to staked token via 1inch for Coinbase", "to": "1inch Contract Address", "value": "inputAmount", "function_name": "swapTx", "input_args": ["chainId: mainnet.id", "userAddress: userAddress", "srcTokenAddress: '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'", "srcTokenSymbol: 'ETH'", "srcTokenDecimals: 18", "srcAmount: inputAmount", "dstTokenAddress: stakingProtocols[i].stakedTokenAddr", "dstTokenSymbol: stakingProtocols[i].stakedTokenSymbol", "dstTokenDecimals: 18"]}, {"description": "Stake into StakeWise", "to": "StakeWise Contract Address", "value": "inputAmount", "function_name": "stakewiseStakeTx", "input_args": ["inputAmount: inputAmount", "userAddress: userAddress"]}, {"description": "Stake into Stader", "to": "Stader Contract Address", "value": "inputAmount", "function_name": "staderStakeTx", "input_args": ["inputAmount: inputAmount", "userAddress: userAddress"]}, {"description": "Stake into EtherFi", "to": "EtherFi Contract Address", "value": "inputAmount", "function_name": "stakeToEtherFiGetWEETHTxs", "input_args": ["chain: mainnet", "inputAmount: inputAmount"]}, {"description": "Stake into Renzo", "to": "Renzo Contract Address", "value": "inputAmount", "function_name": "renzoStakeTx", "input_args": ["inputAmount: inputAmount"]}, {"description": "Stake into FraxFinance", "to": "FraxFinance Contract Address", "value": "inputAmount", "function_name": "fraxStakeTx", "input_args": ["inputAmount: inputAmount", "userAddress: userAddress"]}, {"description": "Stake into Swell", "to": "Swell Contract Address", "value": "inputAmount", "function_name": "swellStakeTx", "input_args": ["inputAmount: inputAmount"]}, {"description": "Stake into RedactedFinance", "to": "RedactedFinance Contract Address", "value": "inputAmount", "function_name": "dineroStakeTx", "input_args": ["inputAmount: inputAmount", "userAddress: userAddress"]}]}
{"case_id": "zircuit_eigenpie_swell", "description": "A case involving staking ETH with Swell, restaking swETH with Eigenpie, and further restaking mswETH with Zircuit to earn various rewards.", "steps": [{"description": "Stake ETH and receive swETH on Swell", "to": "0xf951E335afb289353dc249e82926178EaC7DEd78", "value": "ethInputAmount", "function_name": "depositWithReferral", "input_args": ["ReferalAccount"]}, {"description": "Approve swETH to be restaked to Eigenlayer on Eigenpie to earn Pearls", "to": "0xf951E335afb289353dc249e82926178EaC7DEd78", "value": "0", "function_name": "approve", "input_args": ["0x24db6717dB1C75B9Db6eA47164D8730B63875dB7", "swETHDepositAmount"]}, {"description": "Restake swETH and receive mswETH on Eigenpie", "to": "0x24db6717dB1C75B9Db6eA47164D8730B63875dB7", "value": "0", "function_name": "depositAsset", "input_args": ["0xf951E335afb289353dc249e82926178EaC7DEd78", "swETHDepositAmount", "mswETHAmount", "ReferalAccount"]}, {"description": "Approve mswETH to be restaked on Zircuit to earn Zircuit Points", "to": "0x32bd822d615A3658A68b6fDD30c2fcb2C996D678", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "mswETHAmount"]}, {"description": "Restake mswETH to Zircuit to earn Zircuit Points", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0x32bd822d615A3658A68b6fDD30c2fcb2C996D678", "context.account.address", "mswETHAmount"]}]}
{"case_id": "juice_points", "description": "Juice Finance wETH Collateral Vault Transactions", "steps": [{"description": "Wrap ETH to wETH", "to": "0x4300000000000000000000000000000000000004", "value": "ETH Amount", "function_name": "deposit", "input_args": []}, {"description": "Create Account on Juice", "to": "0x23eBa06981B5c2a6f1a985BdCE41BD64D18e6dFA", "value": "0", "function_name": "createAccount", "input_args": []}, {"description": "Approve wETH for Juice", "to": "0x4300000000000000000000000000000000000004", "value": "0", "function_name": "approve", "input_args": ["0x23eBa06981B5c2a6f1a985BdCE41BD64D18e6dFA", "ETH Amount"]}, {"description": "Deposit wETH to Juice", "to": "0x23eBa06981B5c2a6f1a985BdCE41BD64D18e6dFA", "value": "0", "function_name": "deposit", "input_args": ["ETH Amount", "Account Address"]}, {"description": "Borrow wETH from Juice", "to": "Juice Account Address", "value": "0", "function_name": "borrow", "input_args": ["Borrow Amount"]}, {"description": "Deposit wETH to ezETH Spot Long vault on Juice", "to": "Juice Account Address", "value": "0", "function_name": "strategyDeposit", "input_args": ["0x741011f52B7499ca951f8b8Ee547DD3Cdd813Fda", "Borrow Amount", "Min Out Amount"]}]}
{"case_id": "ether_fi_liquid", "description": "EtherFi Liquid Staking Case", "steps": [{"description": "Get WEETH transactions for staking", "to": "userAddress", "value": "inputAmount", "function_name": "getWEETHTxs", "input_args": ["context.chain", "inputAmount"]}, {"description": "Estimate WEETH amount for staking", "to": "userAddress", "value": "inputAmount", "function_name": "estimateWEETHAmount", "input_args": ["context.chain", "inputAmount"]}, {"description": "Approve and deposit WEETH to EtherFi Vault", "to": "userAddress", "value": "weETHAmount", "function_name": "approveAndDepositWEETHToEtherFiVaultTx", "input_args": ["weETHAmount", "userAddress"]}]}
{"case_id": "bento_batch_official_nft", "description": "Mint Bento Batch official NFTs on the Optimism network.", "steps": [{"description": "a free Bento Batch official NFT", "to": "0xBc1Bb37A522EDB1cAa073ac2B3DEbAcd5E89D81d", "value": "0", "function_name": "randomlyMint", "input_args": []}, {"description": "a Bento Batch official NFT with 0.01 ETH", "to": "0xBc1Bb37A522EDB1cAa073ac2B3DEbAcd5E89D81d", "value": "0.01", "function_name": "randomlyMint", "input_args": []}, {"description": "a Bento Batch official NFT with 0.02 ETH", "to": "0xBc1Bb37A522EDB1cAa073ac2B3DEbAcd5E89D81d", "value": "0.02", "function_name": "randomlyMint", "input_args": []}, {"description": "a Bento Batch official NFT with 0.03 ETH", "to": "0xBc1Bb37A522EDB1cAa073ac2B3DEbAcd5E89D81d", "value": "0.03", "function_name": "randomlyMint", "input_args": []}, {"description": "a Bento Batch official NFT with 0.04 ETH", "to": "0xBc1Bb37A522EDB1cAa073ac2B3DEbAcd5E89D81d", "value": "0.04", "function_name": "randomlyMint", "input_args": []}]}
{"case_id": "lido_multiplier", "description": "A case for staking, wrapping, and supplying ETH to Lido and AAVE with a risk multiplier.", "steps": [{"description": "Enable E-Mode if not already enabled.", "to": "", "value": "0", "function_name": "enableEModeTx", "input_args": []}, {"description": "Delegate the target amount.", "to": "", "value": "0", "function_name": "delegateTx", "input_args": ["targetAmount"]}, {"description": "Approve stETH to wstETH if needed.", "to": "", "value": "0", "function_name": "checkOrApporveSTETHToWSTETHTx", "input_args": ["chain", "userAddress", "targetAmount"]}, {"description": "Approve wstETH to AAVE if needed.", "to": "", "value": "0", "function_name": "checkOrApporveWSTETHToAAVETx", "input_args": ["chain", "userAddress", "targetAmount"]}, {"description": "Stake ETH to Lido.", "to": "", "value": "inputAmount", "function_name": "stakeToLidoTx", "input_args": ["inputAmount"]}, {"description": "Wrap stETH to wstETH.", "to": "", "value": "inputAmount - 1", "function_name": "wrapSTETHToWSTETHTx", "input_args": ["chain", "inputAmount - 1"]}, {"description": "Supply wstETH to AAVE.", "to": "", "value": "wstETHAmount", "function_name": "supplyWSTETHTx", "input_args": ["wstETHAmount", "userAddress"]}, {"description": "Borrow ETH.", "to": "", "value": "borrowAmount", "function_name": "borrowETHTx", "input_args": ["borrowAmount"]}, {"description": "Repeat staking, wrapping, and supplying for n-1 times.", "to": "", "value": "nextBorrowAmount", "function_name": "borrowStakeWrapSupply", "input_args": ["chain", "nextBorrowAmount", "userAddress"]}]}
{"case_id": "stone_swell_l2", "description": "Stake ETH to receive STONE and then stake STONE to Swell L2", "steps": [{"description": "Deposit ETH to StakeStone and receive STONE", "to": "0xa62f9c5af106feee069f38de51098d9d81b90572", "value": "inputAmount", "function_name": "deposit", "input_args": []}, {"description": "Approve STONE to Swell L2", "to": "0x7122985656e38BDC0302Db86685bb972b145bD3C", "value": "0", "function_name": "approve", "input_args": ["0x38d43a6cb8da0e855a42fb6b0733a0498531d774", "receiveStoneAmount"]}, {"description": "Stake STONE to Swell L2", "to": "0x38d43a6cb8da0e855a42fb6b0733a0498531d774", "value": "0", "function_name": "deposit", "input_args": ["0x7122985656e38BDC0302Db86685bb972b145bD3C", "receiveStoneAmount", "userAddress"]}]}
{"case_id": "scroll_stone", "description": "A case to swap ETH to STONE, then to stoneQUEEN, and finally split into staYSTONE and turPSTONE.", "steps": [{"description": "Swap ETH to STONE on Izumi", "to": "0x2db0AFD0045F3518c77eC6591a542e326Befd3D7", "value": "inputAmount", "function_name": "multicall", "input_args": ["firstCall", "secondCall"]}, {"description": "Approve STONE for Tranchess", "to": "0x194c6AcC13E7ecDCb6fc767359291A6fEE179440", "value": "0", "function_name": "approve", "input_args": ["spenderAddress", "amount"]}, {"description": "Swap STONE to stoneQUEEN on Tranchess", "to": "0x194c6AcC13E7ecDCb6fc767359291A6fEE179440", "value": "0", "function_name": "create", "input_args": ["userAddress", "minAcquired", "minOutQ", "0"]}, {"description": "Split stoneQUEEN into staYSTONE and turPSTONE on Tranchess", "to": "0x21366dE9707A1044e351280f085821C734791cee", "value": "0", "function_name": "split", "input_args": ["userAddress", "minOutQ", "0"]}]}
{"case_id": "compound_supply_arbitrum", "description": "Supply assets on Arbitrum using Compound protocol", "steps": [{"description": "Deposit WETH", "to": "wrappedTokenAddr", "value": "inputAmount", "function_name": "depositWETHTx", "input_args": ["wrappedTokenAddr", "inputAmount"]}, {"description": "Approve ERC20 token if needed", "to": "wrappedTokenAddr", "value": "inputAmount", "function_name": "approveERC20TxIfNeeded", "input_args": ["chain", "userAddress", "wrappedTokenAddr", "wrappedTokenSymbol", "tokenDecimals", "cometAddr", "Compound", "inputAmount"]}, {"description": "Supply ERC20 token", "to": "cometAddr", "value": "inputAmount", "function_name": "supplyERC20TokenTx", "input_args": ["cometAddr", "wrappedTokenAddr", "inputAmount", "wrappedTokenSymbol", "tokenDecimals"]}]}
{"case_id": "compound_withdraw_arbitrum", "description": "Withdraw assets from Compound on Arbitrum", "steps": [{"description": "Withdraw ERC20 token", "to": "comet_address", "value": "0", "function_name": "withdrawERC20TokenTx", "input_args": ["cometAddr", "tokenAddr", "withdrawAmount", "tokenSymbol", "tokenDecimals"]}, {"description": "Withdraw WETH", "to": "wETH_address", "value": "0", "function_name": "withdrawWETHTx", "input_args": ["wETHAddr", "inputAmount"]}]}
{"case_id": "zora_famous_creators", "description": "Mint NFTs from famous creators on Zora", "steps": [{"description": "Mint 1 NFT \u2728 golden hour \u2728 with 0.000777 ETH on Zora", "to": "0xe019216b8c0cf7bd6df27de3c9b1d23ef985fd60", "value": "0.000777", "function_name": "mint", "input_args": ["0x04E2516A2c207E84a1839755675dfd8eF6302F0a", "1", "1", "[ReferalAccount]", "encodedData"]}, {"description": "Mint 1 NFT one with 0.000777 ETH on Zora", "to": "0x96f21c95de1abc90959dd5aa70aec1e0e5e2c2b4", "value": "0.000777", "function_name": "mint", "input_args": ["0x04E2516A2c207E84a1839755675dfd8eF6302F0a", "15", "1", "[ReferalAccount]", "encodedData"]}]}
{"case_id": "zora_most_minted", "description": "Minting two NFTs ('11:11' and 'It's a feeling.') on the Zora network.", "steps": [{"description": "Mint '11:11' NFT", "to": "0x04E2516A2c207E84a1839755675dfd8eF6302F0a", "value": "0.000777", "function_name": "mintNFT", "input_args": ["0x051580e8a6da31c4bb48d02f3c22f1e99080b0f3", "3", "1", "0xYourWalletAddress", "11:11", "0.000777", "Zora", "Minting NFT"]}, {"description": "Mint 'It's a feeling.' NFT", "to": "0x04E2516A2c207E84a1839755675dfd8eF6302F0a", "value": "0.000777", "function_name": "mintNFT", "input_args": ["0x0bd0e83cbb9fb191daef14702a8c9fc3575a6ea8", "1", "1", "0xYourWalletAddress", "It's a feeling.", "0.000777", "Zora", "Minting NFT"]}]}
{"case_id": "zircuit_etherfi", "description": "Stake ETH to eETH, wrap eETH to weETH, and stake weETH to Zircuit", "steps": [{"description": "Stake ETH to eETH", "to": "0x308861A430be4cce5502d0A12724771Fc6DaF216", "value": "ETH Amount", "function_name": "deposit", "input_args": ["0x80011844928B469EAc5E4bC7e6EBA9b3C2Fa1b41"]}, {"description": "Approve eETH for wrapping as weETH", "to": "0x35fA164735182de50811E8e2E824cFb9B6118ac2", "value": "0", "function_name": "approve", "input_args": ["0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "eEthAmount"]}, {"description": "Wrap eETH to weETH", "to": "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "value": "0", "function_name": "wrap", "input_args": ["eEthAmount"]}, {"description": "Approve weETH to Zircuit", "to": "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "weEthAmount"]}, {"description": "Stake weETH to Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "context.account.address", "weEthAmount"]}]}
{"case_id": "zircuit_ethena_usdc", "description": "A case to swap USDC to USDe and stake it in Zircuit Restaking Pool.", "steps": [{"description": "Approve USDC for Curve", "to": "0xA0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "value": "0", "function_name": "approve", "input_args": ["0x02950460E2b9529D0E00284A5fA2d7bDF3fA4d72", "usdcAmount"]}, {"description": "Swap USDC to USDe", "to": "0x02950460E2b9529D0E00284A5fA2d7bDF3fA4d72", "value": "0", "function_name": "exchange", "input_args": ["1", "0", "usdcAmount", "usdeAmount"]}, {"description": "Approve USDe for Zircuit", "to": "0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "usdeAmount"]}, {"description": "Stake USDe to Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "context.account.address", "usdeAmount"]}]}
{"case_id": "zircuit_ethena_usdt", "description": "A case to swap USDT to USDe and stake it in Zircuit Restaking Pool.", "steps": [{"description": "Approve USDT to Uniswap", "to": "0xdAC17F958D2ee523a2206206994597C13D831ec7", "value": "0", "function_name": "approve", "input_args": ["0xE592427A0AEce92De3Edee1F18E0157C05861564", "usdtAmount"]}, {"description": "Swap USDT to USDe", "to": "0xE592427A0AEce92De3Edee1F18E0157C05861564", "value": "0", "function_name": "exactInputSingle", "input_args": ["0xdAC17F958D2ee523a2206206994597C13D831ec7", "0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "100", "context.account.address", "Math.floor(Date.now() / 1000) + 300", "usdtAmount", "usdeAmount", "0"]}, {"description": "Approve USDe for Zircuit", "to": "0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "usdeAmount"]}, {"description": "Stake USDe to Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "context.account.address", "usdeAmount"]}]}
{"case_id": "pencils_deposit", "description": "Deposit ETH to Pencils Protocol, swap to STONE, approve and deposit.", "steps": [{"description": "Swap ETH to STONE", "to": "0x80137510979822322193FC997d400D5A6C747bf7", "value": "amount in ETH", "function_name": "swapTx", "input_args": ["chain", "ethAddr", "ETH", "18", "amount", "stoneAddr", "STONE", "18"]}, {"description": "Approve STONE for Pencils Protocol", "to": "0x20DE0435e5674Ef15E78adA570159984524B9E8F", "value": "0", "function_name": "approveERC20TxIfNeeded", "input_args": ["chain", "userAddress", "stoneAddr", "STONE", "18", "pStoneAddr", "Pencils Protocol", "quoteAmount"]}, {"description": "Deposit STONE to Pencils Protocol", "to": "0x20DE0435e5674Ef15E78adA570159984524B9E8F", "value": "quoteAmount in STONE", "function_name": "depositTx", "input_args": ["pStoneAddr", "STONE", "18", "quoteAmount"]}]}
{"case_id": "scroll_puffer_pencils", "description": "A case involving a series of transactions to swap ETH for PufETH, approve the PufETH for spending by the Pencils Protocol, and deposit the PufETH into the Pencils Protocol vault.", "steps": [{"description": "Swap ETH for PufETH", "to": "0xc4d46E8402F476F269c379677C99F18E22Ea030e", "value": "amount", "function_name": "swapTx", "input_args": ["baseSymbol: 'ETH'", "baseAmount: amount", "quoteAddr: pufETHAddress", "quoteSymbol: pufETHSymbol", "userAccount: userAddress"]}, {"description": "Approve PufETH for spending by Pencils Protocol", "to": "0x0C530882C0900b13FC6E8312B52c26e7a5b8e505", "value": "0", "function_name": "approveERC20TxIfNeeded", "input_args": ["chain: context.chain", "userAddress: userAddress", "tokenAddress: pufETHAddress", "tokenSymbol: pufETHSymbol", "tokenDecimals: pencilsVaultDecimals", "spenderAddress: pencilsPufETHVault", "spenderName: 'Pencils Protocol'", "amount: adjustedQuoteAmount"]}, {"description": "Deposit PufETH into Pencils Protocol vault", "to": "0x0C530882C0900b13FC6E8312B52c26e7a5b8e505", "value": "adjustedQuoteAmount", "function_name": "depositTx", "input_args": ["pTokenAddr: pencilsPufETHVault", "tokenSymbol: pufETHSymbol", "tokenDecimals: pencilsVaultDecimals", "tokenAmount: adjustedQuoteAmount"]}]}
{"case_id": "multi_sender", "description": "A case to send USDT to multiple recipients on the Polygon network.", "steps": [{"description": "Transfer USDT to recipient", "to": "TokenAddress.Polygon.USDT", "value": "0", "function_name": "transfer", "input_args": ["recipient_address", "amount"]}, {"description": "Transfer USDT to recipient", "to": "TokenAddress.Polygon.USDT", "value": "0", "function_name": "transfer", "input_args": ["recipient_address", "amount"]}, {"description": "Transfer USDT to recipient", "to": "TokenAddress.Polygon.USDT", "value": "0", "function_name": "transfer", "input_args": ["recipient_address", "amount"]}]}
{"case_id": "etf_base_meme_top10", "description": "Swap USDC to top 10 Ethereum tokens using 1inch", "steps": [{"description": "Approve USDC for 1inch if allowance is insufficient", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "0", "function_name": "approve", "input_args": ["USDCAddr", "usdcAmount"]}, {"description": "Swap USDC to Top1 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "usdcUsage", "function_name": "swap", "input_args": ["USDCAddr", "Top1TokenAddress", "usdcUsage", "Top1TokenDecimals", "5.0"]}, {"description": "Swap USDC to Top2 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "usdcUsage", "function_name": "swap", "input_args": ["USDCAddr", "Top2TokenAddress", "usdcUsage", "Top2TokenDecimals", "5.0"]}, {"description": "Swap USDC to Top3 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "usdcUsage", "function_name": "swap", "input_args": ["USDCAddr", "Top3TokenAddress", "usdcUsage", "Top3TokenDecimals", "5.0"]}, {"description": "Swap USDC to Top4 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "usdcUsage", "function_name": "swap", "input_args": ["USDCAddr", "Top4TokenAddress", "usdcUsage", "Top4TokenDecimals", "5.0"]}, {"description": "Swap USDC to Top5 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "usdcUsage", "function_name": "swap", "input_args": ["USDCAddr", "Top5TokenAddress", "usdcUsage", "Top5TokenDecimals", "5.0"]}, {"description": "Swap USDC to Top6 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "usdcUsage", "function_name": "swap", "input_args": ["USDCAddr", "Top6TokenAddress", "usdcUsage", "Top6TokenDecimals", "5.0"]}, {"description": "Swap USDC to Top7 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "usdcUsage", "function_name": "swap", "input_args": ["USDCAddr", "Top7TokenAddress", "usdcUsage", "Top7TokenDecimals", "5.0"]}, {"description": "Swap USDC to Top8 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "usdcUsage", "function_name": "swap", "input_args": ["USDCAddr", "Top8TokenAddress", "usdcUsage", "Top8TokenDecimals", "5.0"]}, {"description": "Swap USDC to Top9 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "usdcUsage", "function_name": "swap", "input_args": ["USDCAddr", "Top9TokenAddress", "usdcUsage", "Top9TokenDecimals", "5.0"]}, {"description": "Swap USDC to Top10 token", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "usdcUsage", "function_name": "swap", "input_args": ["USDCAddr", "Top10TokenAddress", "usdcUsage", "Top10TokenDecimals", "5.0"]}]}
