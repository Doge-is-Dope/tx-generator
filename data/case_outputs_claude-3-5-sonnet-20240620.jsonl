{"case_id": "yearn_v3_usdce", "description": "Approve and Deposit USDC.e to Yearn V3 Vault", "steps": [{"description": "Approve USDC.e vault to spend USDC.e on Yearn V3", "to": "<UNKNOWN>", "value": "0", "function_name": "approve", "input_args": ["0xA013Fbd4b711f9ded6fB09C1c0d358E2FbC2EAA0", "<UNKNOWN>"]}, {"description": "Deposit USDC.e to vault USDC.e-A on Yearn V3", "to": "0xA013Fbd4b711f9ded6fB09C1c0d358E2FbC2EAA0", "value": "0", "function_name": "deposit", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "eigenpie_steth", "description": "Stake ETH to Lido and then stake stETH to Eigenpie for additional rewards.", "steps": [{"description": "Stake ETH to Lido", "to": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84", "value": "<UNKNOWN>", "function_name": "submit", "input_args": ["<UNKNOWN>"]}, {"description": "Approve stETH to Eigenpie", "to": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84", "value": "0", "function_name": "approve", "input_args": ["0x24db6717dB1C75B9Db6eA47164D8730B63875dB7", "<UNKNOWN>"]}, {"description": "Stake stETH to Eigenpie", "to": "0x24db6717dB1C75B9Db6eA47164D8730B63875dB7", "value": "0", "function_name": "depositAsset", "input_args": ["0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84", "<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "ether_fi_arbitrum_bridge", "description": "Stake ETH with ether.fi, wrap it, and bridge to Arbitrum One", "steps": [{"description": "Stake ETH to ether.fi", "to": "0x308861A430be4cce5502d0A12724771Fc6DaF216", "value": "<UNKNOWN>", "function_name": "deposit", "input_args": []}, {"description": "Approve eETH to ether.fi", "to": "0x35fA164735182de50811E8e2E824cFb9B6118ac2", "value": "0", "function_name": "approve", "input_args": ["0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "<UNKNOWN>"]}, {"description": "Wrap eETH into weETH", "to": "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "value": "0", "function_name": "wrap", "input_args": ["<UNKNOWN>"]}, {"description": "Approve weETH to ether.fi", "to": "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "value": "0", "function_name": "approve", "input_args": ["0xa3A7B6F88361F48403514059F1F16C8E78d60EeC", "<UNKNOWN>"]}, {"description": "Bridge weETH to Arbitrum One", "to": "0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef", "value": "<UNKNOWN>", "function_name": "outboundTransfer", "input_args": ["0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "<UNKNOWN>", "<UNKNOWN>", "200000", "300000000", "<UNKNOWN>"]}]}
{"case_id": "orbit_points", "description": "Orbit Points: Supply ETH and borrow ETH in multiple iterations to earn points on the Blast network.", "steps": [{"description": "Enter oETH market (if not already entered)", "to": "0x1E18C3cb491D908241D0db14b081B51be7B6e652", "value": "0", "function_name": "enterMarkets", "input_args": ["[\"0x0872b71EFC37CB8DdE22B2118De3d800427fdba0\"]"]}, {"description": "Supply initial ETH to mint oETH", "to": "0x0872b71EFC37CB8DdE22B2118De3d800427fdba0", "value": "<USER_INPUT>", "function_name": "mint", "input_args": []}, {"description": "Borrow ETH at 65% rate", "to": "0x0872b71EFC37CB8DdE22B2118De3d800427fdba0", "value": "0", "function_name": "borrow", "input_args": ["<CALCULATED_BORROW_AMOUNT>"]}]}
{"case_id": "arbitrum_to_polygon_yearn_v3_usdt", "description": "Bridge USDT from Arbitrum to Polygon and deposit to Yearn V3 vault", "steps": [{"description": "Approve USDT spending for Stargate", "to": "<UNKNOWN>", "value": "0", "function_name": "approve", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Bridge USDT from Arbitrum to Polygon via Stargate", "to": "0xcE8CcA271Ebc0533920C83d39F417ED6A0abB7D0", "value": "0", "function_name": "swap", "input_args": ["<UNKNOWN>"]}, {"description": "Approve USDT spending for Yearn V3 vault on Polygon", "to": "0xc2132D05D31c914a87C6611C10748AEb04B58e8F", "value": "0", "function_name": "approve", "input_args": ["0xBb287E6017d3DEb0e2E65061e8684eab21060123", "<UNKNOWN>"]}, {"description": "Deposit USDT into Yearn V3 vault on Polygon", "to": "0xBb287E6017d3DEb0e2E65061e8684eab21060123", "value": "0", "function_name": "deposit", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "gamma_yearn", "description": "This case represents a complex DeFi operation involving swapping WETH to USDC.e, providing liquidity to a Gamma vault, and then depositing the resulting LP tokens into a Yearn v3 vault for additional yield.", "steps": [{"description": "Approve WETH spending for 1inch router", "to": "<UNKNOWN>", "value": "0", "function_name": "approve", "input_args": ["<1inch_router_address>", "<weth_amount>"]}, {"description": "Swap WETH to USDC.e using 1inch", "to": "<1inch_router_address>", "value": "0", "function_name": "swap", "input_args": ["<weth_address>", "<usdc.e_address>", "<weth_amount>", "<min_return_amount>", "<additional_swap_params>"]}, {"description": "Approve USDC.e spending for Gamma vault", "to": "0x3Cc20A6795c4b57d9817399F68E83e71C8626580", "value": "0", "function_name": "approve", "input_args": ["0x3Cc20A6795c4b57d9817399F68E83e71C8626580", "<usdc.e_amount>"]}, {"description": "Approve WETH spending for Gamma vault", "to": "0x3Cc20A6795c4b57d9817399F68E83e71C8626580", "value": "0", "function_name": "approve", "input_args": ["0x3Cc20A6795c4b57d9817399F68E83e71C8626580", "<weth_amount>"]}, {"description": "Deposit USDC.e and WETH into Gamma vault", "to": "0xA42d55074869491D60Ac05490376B74cF19B00e6", "value": "0", "function_name": "deposit", "input_args": ["0x3Cc20A6795c4b57d9817399F68E83e71C8626580", "<usdc.e_amount>", "<weth_amount>", "<min_lp_tokens>", "<additional_deposit_params>"]}, {"description": "Approve aUSDC-WETH LP token spending for Yearn v3 vault", "to": "0x3Cc20A6795c4b57d9817399F68E83e71C8626580", "value": "0", "function_name": "approve", "input_args": ["0x54303F18161d9870b0fc66B88B0B129e8e5fF505", "<lp_token_amount>"]}, {"description": "Deposit aUSDC-WETH LP tokens into Yearn v3 vault", "to": "0x54303F18161d9870b0fc66B88B0B129e8e5fF505", "value": "0", "function_name": "deposit", "input_args": ["<lp_token_amount>", "<user_address>"]}]}
{"case_id": "gmx_delta_neutral_strategy", "description": "GMX Delta Neutral Strategy on Arbitrum network", "steps": [{"description": "Create short order using ETH on GMX", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "createShortOrderTx", "input_args": ["chain", "userAddr", "inputAmount"]}]}
{"case_id": "pendle_usde", "description": "This case involves swapping ETH for USDe and then providing liquidity to the Pendle PT/SY pool on the Arbitrum network.", "steps": [{"description": "Swap ETH for USDe using 1inch", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "swap", "input_args": ["ETH", "USDe"]}, {"description": "Approve USDe spending for Pendle", "to": "0x5d3a1Ff2b6BAb83b63cd9AD0787074081a52ef34", "value": "0", "function_name": "approve", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Provide liquidity to PT/SY pool on Pendle", "to": "0x888888888889758F76e7103c6CbF23ABbF58F946", "value": "0", "function_name": "addLiquiditySingleToken", "input_args": ["<UNKNOWN>"]}]}
{"case_id": "pendle_weETH", "description": "This case represents a liquidity provision operation for weETH on the Pendle protocol on the Arbitrum network.", "steps": [{"description": "Approve weETH token for spending by Pendle router", "to": "0x35751007a407ca6FEFfE80b3cB397736D2cf4dbe", "value": "0", "function_name": "approve", "input_args": ["0x888888888889758F76e7103c6CbF23ABbF58F946", "<UNKNOWN>"]}, {"description": "Provide liquidity to PT/SY pool on Pendle", "to": "0x888888888889758F76e7103c6CbF23ABbF58F946", "value": "0", "function_name": "addLiquiditySingleToken", "input_args": ["<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "gauntlet_dai_core", "description": "This case represents a process to stake DAI tokens in the Gauntlet DAI Core vault on the Morpho protocol.", "steps": [{"description": "Transfer DAI tokens to the Ethereum Bundler V2", "to": "0x6B175474E89094C44Da98b954EedeAC495271d0F", "value": "0", "function_name": "transfer", "input_args": ["0x<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Deposit DAI tokens into the Morpho Gauntlet DAI Core vault", "to": "0x500331c9fF24D9d11aee6B07734Aa72343EA74a5", "value": "0", "function_name": "deposit", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "morpho_gauntlet_weth_prime", "description": "Deposit ETH into Gauntlet WETH Prime vault on Morpho", "steps": [{"description": "Deposit ETH into Morpho Gauntlet WETH Prime vault", "to": "0x2371e134e3455e0593363cBF89d3b6cf53740618", "value": "<UNKNOWN>", "function_name": "depositEthMulticall", "input_args": ["<UNKNOWN>"]}]}
{"case_id": "morpho_leadblock_usdc_rwa", "description": "This case represents a transaction to deposit USDC into the LeadBlock USDC RWA vault on Morpho protocol.", "steps": [{"description": "Transfer USDC to Ethereum Bundler V2", "to": "0x4cA0E178c94f039d7F202E09d8d1a655Ed3fb6b6", "value": "0", "function_name": "transfer", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Deposit USDC into LeadBlock USDC RWA vault", "to": "0x4cA0E178c94f039d7F202E09d8d1a655Ed3fb6b6", "value": "0", "function_name": "deposit", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "morpho_re7_usdt", "description": "This case represents a process to stake USDT in the Morpho Re7 USDT vault on the Ethereum mainnet.", "steps": [{"description": "Transfer USDT to the Ethereum Bundler V2", "to": "0x95EeF579155cd2C5510F312c8fA39208c3Be01a8", "value": "0", "function_name": "transfer", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Deposit USDT into the Morpho Re7 USDT vault", "to": "0x95EeF579155cd2C5510F312c8fA39208c3Be01a8", "value": "0", "function_name": "deposit", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "morpho_re7_weth", "description": "This case represents a deposit of ETH into the Morpho Re7 WETH vault.", "steps": [{"description": "Deposit ETH into Morpho Re7 WETH vault", "to": "0x78Fc2c2eD1A4cDb5402365934aE5648aDAd094d0", "value": "<UNKNOWN>", "function_name": "depositEthMulticall", "input_args": ["<UNKNOWN>"]}]}
{"case_id": "gauntlet_usdt_prime", "description": "This case represents a process to stake USDT in the Gauntlet USDT Prime vault on the Morpho protocol.", "steps": [{"description": "Transfer USDT to the Ethereum Bundler V2 contract", "to": "0x8CB3649114051cA5119141a34C200D65dc0Faa73", "value": "0", "function_name": "transfer", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Deposit USDT into the Gauntlet USDT Prime vault on Morpho", "to": "0x8CB3649114051cA5119141a34C200D65dc0Faa73", "value": "0", "function_name": "multicall", "input_args": ["<UNKNOWN>"]}]}
{"case_id": "morpho_gauntlet_lrt_core", "description": "This case represents a deposit into the Gauntlet LRT Core vault on Morpho protocol using ETH.", "steps": [{"description": "Deposit ETH into Morpho Gauntlet LRT Core vault", "to": "0x4881Ef0BF6d2365D3dd6499ccd7532bcdBCE0658", "value": "<UNKNOWN>", "function_name": "depositEthMulticall", "input_args": ["<UNKNOWN>"]}]}
{"case_id": "merlin_solvBTC_avalon", "description": "This case represents a complex DeFi operation on the Merlin network, involving wrapping BTC, swapping tokens, and staking in multiple protocols.", "steps": [{"description": "Wrap BTC to WBTC", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "wrapBTC", "input_args": ["btcAmount"]}, {"description": "Approve WBTC for MerlinSwap", "to": "WBTCAddr", "value": "0", "function_name": "approve", "input_args": ["MerlinSwapAddr", "btcAmount"]}, {"description": "Swap WBTC for M-BTC on MerlinSwap", "to": "MerlinSwapAddr", "value": "0", "function_name": "swap", "input_args": ["WBTCAddr", "MBTCAddr", "btcAmount", "swapAmount", "0.015"]}, {"description": "Approve M-BTC for SolvBTC", "to": "MBTCAddr", "value": "0", "function_name": "approve", "input_args": ["SolvBTCAddr", "swapAmount"]}, {"description": "Stake M-BTC to get SolvBTC", "to": "SolvBTCAddr", "value": "0", "function_name": "solvBTC", "input_args": ["swapAmount"]}, {"description": "Approve SolvBTC for Avalon", "to": "SolvBTCToken", "value": "0", "function_name": "approve", "input_args": ["AvalonPoolAddr", "swapAmount"]}, {"description": "Supply SolvBTC to Avalon", "to": "AvalonPoolAddr", "value": "0", "function_name": "supply", "input_args": ["SolvBTCToken", "swapAmount"]}]}
{"case_id": "scroll_airdrop_hunting_rookie", "description": "A case for airdrop hunting on Scroll network, involving USDC and ETH swaps, wrapping, and unwrapping using Ambient protocol.", "steps": [{"description": "Approve USDC to Ambient", "to": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48", "value": "0", "function_name": "approve", "input_args": ["0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "<UNKNOWN>"]}, {"description": "Swap USDC to ETH on Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "0", "function_name": "swapUSDCToETH", "input_args": ["<UNKNOWN>"]}, {"description": "Wrap ETH to WETH", "to": "0x5300000000000000000000000000000000000004", "value": "<UNKNOWN>", "function_name": "deposit", "input_args": []}, {"description": "Unwrap WETH to ETH", "to": "0x5300000000000000000000000000000000000004", "value": "0", "function_name": "withdraw", "input_args": ["<UNKNOWN>"]}, {"description": "Swap ETH to USDC on Ambient", "to": "0xaaaaaaaacb71bf2c8cae522ea5fa455571a74106", "value": "<UNKNOWN>", "function_name": "swapETHToUSDC", "input_args": []}]}
{"case_id": "merlin_solvBTC_mage", "description": "A multi-step process to wrap BTC, swap for M-BTC, stake in SolvBTC, and then stake in Mage on the Merlin network.", "steps": [{"description": "Wrap BTC to WBTC", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "wrapBTC", "input_args": ["btcAmount"]}, {"description": "Approve WBTC for MerlinSwap", "to": "WBTCAddr", "value": "0", "function_name": "approve", "input_args": ["MerlinSwapAddr", "btcAmount"]}, {"description": "Swap WBTC for M-BTC on MerlinSwap", "to": "MerlinSwapAddr", "value": "0", "function_name": "swap", "input_args": ["WBTCAddr", "MBTCAddr", "btcAmount", "swapAmount", "0.015"]}, {"description": "Approve M-BTC for SolvBTC", "to": "MBTCAddr", "value": "0", "function_name": "approve", "input_args": ["SolvBTCAddr", "swapAmount"]}, {"description": "Stake M-BTC in SolvBTC", "to": "SolvBTCAddr", "value": "0", "function_name": "solvBTC", "input_args": ["swapAmount"]}, {"description": "Approve SolvBTC for Mage", "to": "SolvBTCToken", "value": "0", "function_name": "approve", "input_args": ["MageSolvBTCAddr", "swapAmount"]}, {"description": "Stake SolvBTC in Mage", "to": "MageSolvBTCAddr", "value": "0", "function_name": "mageSolvBTC", "input_args": ["swapAmount"]}]}
{"case_id": "pendle_points", "description": "A case for swapping ETH to YT rsETH and YT ezETH using Pendle protocol on Arbitrum network.", "steps": [{"description": "Swap ETH to YT rsETH", "to": "0x4186BFC76E2E237523CBC30FD220FE055156b41F", "value": "<UNKNOWN>", "function_name": "swapExactToken", "input_args": ["PendleOutputType.Yt", "pendleContext", "{ tokenInName: 'ETH', outputTokenName: 'YT rsETH' }"]}, {"description": "Swap ETH to YT ezETH", "to": "0x2416092f143378750bb29b79eD961ab195CcEea5", "value": "<UNKNOWN>", "function_name": "swapExactToken", "input_args": ["PendleOutputType.Yt", "pendleContext", "{ tokenInName: 'ETH', outputTokenName: 'YT ezETH' }"]}]}
{"case_id": "yearn_withdrawal", "description": "Yearn Finance withdrawal case for multiple tokens (yvDAI-A, yvUSDC-A, yvUSDT-A, yvWETH-A) on Polygon network", "steps": [{"description": "Withdraw yvDAI-A to DAI from Yearn", "to": "0x90b2f54C6aDDAD41b8f6c4fCCd555197BC0F773B", "value": "0", "function_name": "redeem", "input_args": ["<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>", "1"]}, {"description": "Withdraw yvUSDC-A to USDC.e from Yearn", "to": "0xA013Fbd4b711f9ded6fB09C1c0d358E2FbC2EAA0", "value": "0", "function_name": "redeem", "input_args": ["<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>", "1"]}, {"description": "Withdraw yvUSDT-A to USDT from Yearn", "to": "0xBb287E6017d3DEb0e2E65061e8684eab21060123", "value": "0", "function_name": "redeem", "input_args": ["<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>", "1"]}, {"description": "Withdraw yvWETH-A to WETH from Yearn", "to": "0x305F25377d0a39091e99B975558b1bdfC3975654", "value": "0", "function_name": "redeem", "input_args": ["<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>", "1"]}]}
{"case_id": "bridge_eth_ethereum_optimism", "description": "Bridge ETH from Ethereum to Optimism using Stargate protocol", "steps": [{"description": "Bridge ETH from Ethereum to Optimism", "to": "0x77b2043768d28E9C9aB44E1aBfC95944bcE57931", "value": "<UNKNOWN>", "function_name": "bridgeTx", "input_args": ["ETH", "18", "Ethereum", "Optimism", "30111"]}]}
{"case_id": "zircuit_rsweth", "description": "This case represents a series of transactions for wrapping ETH to rswETH, approving rswETH for Zircuit, and depositing rswETH to Zircuit.", "steps": [{"description": "Wrap ETH to rswETH", "to": "0xFAe103DC9cf190eD75350761e95403b7b8aFa6c0", "value": "<UNKNOWN>", "function_name": "depositWithReferral", "input_args": ["<UNKNOWN>"]}, {"description": "Approve rswETH for Zircuit", "to": "0xFAe103DC9cf190eD75350761e95403b7b8aFa6c0", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "<UNKNOWN>"]}, {"description": "Deposit rswETH to Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0xFAe103DC9cf190eD75350761e95403b7b8aFa6c0", "<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "renzo_pendle_airpuff", "description": "A multi-step transaction process involving Renzo, Pendle, and AirPuff protocols for staking ETH and managing positions.", "steps": [{"description": "Stake ETH to ezETH on Renzo", "to": "0x74a09653A083691711cF8215a6ab074BB4e99ef5", "value": "<UNKNOWN>", "function_name": "depositETH", "input_args": ["<UNKNOWN>"]}, {"description": "Approve ezETH to Pendle", "to": "0xbf5495Efe5DB9ce00f80364C8B423567e58d2110", "value": "0", "function_name": "approve", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Swap ezETH to PT-ezETH on Pendle", "to": "0x888888888889758F76e7103c6CbF23ABbF58F946", "value": "0", "function_name": "swapExactToken", "input_args": ["<UNKNOWN>"]}, {"description": "Approve PT-ezETH to AirPuff", "to": "0xf7906F274c174A52d444175729E3fa98f9bde285", "value": "0", "function_name": "approve", "input_args": ["0xebdaDFC590393938b601a9738C3107460838e880", "<UNKNOWN>"]}, {"description": "Deposit PT-ezETH to AirPuff", "to": "0xebdaDFC590393938b601a9738C3107460838e880", "value": "0", "function_name": "openPosition", "input_args": ["<UNKNOWN>"]}]}
{"case_id": "ethena_usdt", "description": "This case represents a series of transactions to swap USDT for USDe and stake it on Ethena protocol.", "steps": [{"description": "Approve USDT to Uniswap", "to": "0xdAC17F958D2ee523a2206206994597C13D831ec7", "value": "0", "function_name": "approve", "input_args": ["0xE592427A0AEce92De3Edee1F18E0157C05861564", "<UNKNOWN>"]}, {"description": "Swap USDT to USDe", "to": "0xE592427A0AEce92De3Edee1F18E0157C05861564", "value": "0", "function_name": "exactInputSingle", "input_args": ["[<UNKNOWN>]"]}, {"description": "Approve USDe to lock on Ethena", "to": "0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "value": "0", "function_name": "approve", "input_args": ["0x8707f238936c12c309bfc2B9959C35828AcFc512", "<UNKNOWN>"]}, {"description": "Stake USDe on Ethena", "to": "0x8707f238936c12c309bfc2B9959C35828AcFc512", "value": "0", "function_name": "stake", "input_args": ["0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "<UNKNOWN>"]}]}
{"case_id": "lido_multiplier_withdraw", "description": "A case for withdrawing and repaying debt using Lido's wstETH and AAVE, involving multiple steps including withdrawing wstETH, swapping to ETH, and repaying debt.", "steps": [{"description": "Approve 1inch to spend wstETH (if needed)", "to": "<UNKNOWN>", "value": "0", "function_name": "approve", "input_args": ["1inch_address", "amount"]}, {"description": "Withdraw wstETH from AAVE", "to": "<UNKNOWN>", "value": "0", "function_name": "withdraw", "input_args": ["wstETH_address", "amount", "user_address"]}, {"description": "Swap wstETH to ETH using 1inch", "to": "0x111111125421ca6dc452d289314280a0f8842a65", "value": "0", "function_name": "swap", "input_args": ["wstETH_address", "ETH_address", "amount", "min_return_amount", "distribution"]}, {"description": "Repay ETH debt to AAVE", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "repay", "input_args": ["amount", "user_address"]}]}
{"case_id": "aerodrome_degen_liquidity", "description": "Provide liquidity for WETH-DEGEN pair on Aerodrome and start farming", "steps": [{"description": "Swap ETH to DEGEN", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "swap", "input_args": ["ETH", "DEGEN"]}, {"description": "Wrap ETH to WETH", "to": "0x4200000000000000000000000000000000000006", "value": "<UNKNOWN>", "function_name": "deposit", "input_args": []}, {"description": "Approve WETH for providing liquidity", "to": "0x4200000000000000000000000000000000000006", "value": "0", "function_name": "approve", "input_args": ["0xcF77a3Ba9A5CA399B7c97c74d54e5b1Beb874E43", "<UNKNOWN>"]}, {"description": "Approve DEGEN for providing liquidity", "to": "<UNKNOWN>", "value": "0", "function_name": "approve", "input_args": ["0xcF77a3Ba9A5CA399B7c97c74d54e5b1Beb874E43", "<UNKNOWN>"]}, {"description": "Provide WETH and DEGEN liquidity on Aerodrome", "to": "0xcF77a3Ba9A5CA399B7c97c74d54e5b1Beb874E43", "value": "0", "function_name": "addLiquidity", "input_args": ["0x4200000000000000000000000000000000000006", "<UNKNOWN>", "false", "<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Approve LP Token(vAMM-WETH/DEGEN) for farming", "to": "0x2C4909355b0C036840819484c3A882A95659aBf3", "value": "0", "function_name": "approve", "input_args": ["0x86a1260ab9f758026ce1a5830bdff66dbcf736d5", "<UNKNOWN>"]}, {"description": "Deposit LP token(vAMM-WETH/DEGEN) and start farming", "to": "0x86a1260ab9f758026ce1a5830bdff66dbcf736d5", "value": "0", "function_name": "deposit", "input_args": ["<UNKNOWN>"]}]}
{"case_id": "rho_supply", "description": "This case represents a process to supply STONE tokens to Rho Markets on the Scroll network. It involves swapping ETH for STONE, approving STONE for Rho Markets, and then supplying STONE to Rho Markets.", "steps": [{"description": "Swap ETH for STONE tokens", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "swapTx", "input_args": ["chain", "baseAddr", "baseSymbol", "baseDecimals", "baseAmount", "quoteAddr", "quoteSymbol", "quoteDecimals"]}, {"description": "Approve STONE tokens for Rho Markets if needed", "to": "0x80137510979822322193FC997d400D5A6C747bf7", "value": "0", "function_name": "approveERC20TxIfNeeded", "input_args": ["chain", "userAddress", "tokenAddress", "tokenSymbol", "tokenDecimals", "spenderAddress", "spenderName", "amount"]}, {"description": "Supply STONE tokens to Rho Markets", "to": "0xAD3d07d431B85B525D81372802504Fa18DBd554c", "value": "0", "function_name": "supplyErc20Tx", "input_args": ["rTokenAddr", "tokenSymbol", "tokenDecimals", "tokenAmount"]}]}
{"case_id": "rho_withdraw", "description": "This case represents a withdrawal process from Rho Markets, involving redeeming rSTONE tokens, approving STONE tokens, and swapping STONE for ETH on the Scroll network.", "steps": [{"description": "Redeem rSTONE tokens for STONE tokens", "to": "0xAD3d07d431B85B525D81372802504Fa18DBd554c", "value": "0", "function_name": "redeem", "input_args": ["<UNKNOWN>"]}, {"description": "Approve STONE tokens for Ambient DEX", "to": "0x80137510979822322193FC997d400D5A6C747bf7", "value": "0", "function_name": "approve", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Swap STONE tokens for ETH on Ambient DEX", "to": "<UNKNOWN>", "value": "0", "function_name": "swap", "input_args": ["<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "zircuit_renzo", "description": "This case represents a series of transactions for staking ETH to ezETH and then to Zircuit, involving multiple smart contract interactions.", "steps": [{"description": "Stake ETH to ezETH", "to": "0x74a09653A083691711cF8215a6ab074BB4e99ef5", "value": "<UNKNOWN>", "function_name": "depositETH", "input_args": ["0x80011844928B469EAc5E4bC7e6EBA9b3C2Fa1b41"]}, {"description": "Approve ezETH for Zircuit", "to": "0xbf5495Efe5DB9ce00f80364C8B423567e58d2110", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "<UNKNOWN>"]}, {"description": "Stake ezETH to Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0xbf5495Efe5DB9ce00f80364C8B423567e58d2110", "<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "kelp_and_pendle", "description": "A case for staking ETH, depositing into Kelp, and providing liquidity on Pendle.", "steps": [{"description": "Stake ETH for ETHx on Stader", "to": "0xcf5EA1b38380f6aF39068375516Daf40Ed70D299", "value": "<UNKNOWN>", "function_name": "deposit", "input_args": ["<UNKNOWN>"]}, {"description": "Approve ETHx transfer to Kelp", "to": "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b", "value": "0", "function_name": "approve", "input_args": ["0x036676389e48133B63a802f8635AD39E752D375D", "<UNKNOWN>"]}, {"description": "Deposit ETHx for rsETH on Kelp", "to": "0x036676389e48133B63a802f8635AD39E752D375D", "value": "0", "function_name": "depositAsset", "input_args": ["0xA35b1B31Ce002FBF2058D22F30f95D405200A15b", "<UNKNOWN>", "0", "0xa9857dbaa6f99e5a557b23d321843a48c5a5417029894f76db4c80bddab116bc"]}, {"description": "Approve rsETH transfer to Pendle", "to": "0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7", "value": "0", "function_name": "approve", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Provide Liquidity to PT/SY pool on Pendle", "to": "0x4f43c77872Db6BA177c270986CD30c3381AF37Ee", "value": "0", "function_name": "<UNKNOWN>", "input_args": ["<UNKNOWN>"]}]}
{"case_id": "aave_usdc_eth", "description": "This case represents an AAVE USDC-ETH leveraged position. It involves supplying USDC as collateral to AAVE and borrowing ETH against it.", "steps": [{"description": "Approve USDC spending for AAVE if needed", "to": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48", "value": "0", "function_name": "approve", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "<USDC_AMOUNT>"]}, {"description": "Supply USDC to AAVE as collateral", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "supply", "input_args": ["0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48", "<USDC_AMOUNT>", "<USER_ADDRESS>", "0"]}, {"description": "Disable AAVE E-Mode if enabled", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "setUserEMode", "input_args": ["0"]}, {"description": "Delegate borrowing power on the debt WETH if needed", "to": "0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE", "value": "0", "function_name": "approveDelegation", "input_args": ["0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "<ETH_AMOUNT>"]}, {"description": "Borrow ETH from AAVE", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "0", "function_name": "borrowETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "<ETH_AMOUNT>", "2", "0"]}]}
{"case_id": "aave_supply_multi_chain", "description": "This case represents a multi-chain supply operation for the Aave protocol, allowing users to supply various assets across different blockchain networks.", "steps": [{"description": "Supply ETH or stablecoins on Base network", "to": "<UNKNOWN>", "value": "0", "function_name": "supplyAsset", "input_args": ["asset_amount", "asset_type"]}, {"description": "Supply MATIC, ETH, or stablecoins on Polygon network", "to": "<UNKNOWN>", "value": "0", "function_name": "supplyAsset", "input_args": ["asset_amount", "asset_type"]}, {"description": "Supply ETH or stablecoins on Arbitrum network", "to": "<UNKNOWN>", "value": "0", "function_name": "supplyAsset", "input_args": ["asset_amount", "asset_type"]}, {"description": "Supply ETH or stablecoins on Optimism network", "to": "<UNKNOWN>", "value": "0", "function_name": "supplyAsset", "input_args": ["asset_amount", "asset_type"]}, {"description": "Supply ETH or stablecoins on Ethereum mainnet", "to": "<UNKNOWN>", "value": "0", "function_name": "supplyAsset", "input_args": ["asset_amount", "asset_type"]}]}
{"case_id": "aave_eth_eth_emode", "description": "This case represents an AAVE ETH E-Mode operation, where a user supplies ETH as collateral and borrows ETH using the E-Mode feature.", "steps": [{"description": "Supply ETH to AAVE as collateral", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "<UNKNOWN>", "function_name": "depositETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "<UNKNOWN>", "0"]}, {"description": "Enable AAVE E-Mode if it is disabled", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "setUserEMode", "input_args": ["1"]}, {"description": "Delegate borrowing power on the debt WETH if needed", "to": "0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE", "value": "0", "function_name": "approveDelegation", "input_args": ["0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "<UNKNOWN>"]}, {"description": "Borrow ETH from AAVE", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "0", "function_name": "borrowETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "<UNKNOWN>", "2", "0"]}]}
{"case_id": "aave_eth_eth", "description": "Supply ETH to AAVE as collateral and borrow ETH against it", "steps": [{"description": "Supply ETH to AAVE as collateral", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "<UNKNOWN>", "function_name": "depositETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "<UNKNOWN>", "0"]}, {"description": "Disable AAVE E-Mode if it is enabled", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "setUserEMode", "input_args": ["0"]}, {"description": "Delegate borrowing power on the debt WETH if needed", "to": "0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE", "value": "0", "function_name": "approveDelegation", "input_args": ["0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "<UNKNOWN>"]}, {"description": "Borrow ETH from AAVE", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "0", "function_name": "borrowETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "<UNKNOWN>", "2", "0"]}]}
{"case_id": "aave_repay_multi_chain", "description": "This case represents a multi-chain AAVE repayment functionality, allowing users to repay borrowed assets on various blockchain networks including Base, Polygon, Arbitrum, Optimism, and Ethereum.", "steps": [{"description": "Repay ETH on Base network", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "repayNativeToken", "input_args": ["amount", "userAddress"]}, {"description": "Repay stablecoins on Base network", "to": "<UNKNOWN>", "value": "0", "function_name": "repayErc20Token", "input_args": ["amount", "tokenAddress", "userAddress"]}, {"description": "Repay MATIC on Polygon network", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "repayNativeToken", "input_args": ["amount", "userAddress"]}, {"description": "Repay ETH on Polygon network", "to": "<UNKNOWN>", "value": "0", "function_name": "repayErc20Token", "input_args": ["amount", "tokenAddress", "userAddress"]}, {"description": "Repay stablecoins on Polygon network", "to": "<UNKNOWN>", "value": "0", "function_name": "repayErc20Token", "input_args": ["amount", "tokenAddress", "userAddress"]}, {"description": "Repay ETH on Arbitrum network", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "repayNativeToken", "input_args": ["amount", "userAddress"]}, {"description": "Repay stablecoins on Arbitrum network", "to": "<UNKNOWN>", "value": "0", "function_name": "repayErc20Token", "input_args": ["amount", "tokenAddress", "userAddress"]}, {"description": "Repay ETH on Optimism network", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "repayNativeToken", "input_args": ["amount", "userAddress"]}, {"description": "Repay stablecoins on Optimism network", "to": "<UNKNOWN>", "value": "0", "function_name": "repayErc20Token", "input_args": ["amount", "tokenAddress", "userAddress"]}, {"description": "Repay ETH on Ethereum mainnet", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "repayNativeToken", "input_args": ["amount", "userAddress"]}, {"description": "Repay stablecoins on Ethereum mainnet", "to": "<UNKNOWN>", "value": "0", "function_name": "repayErc20Token", "input_args": ["amount", "tokenAddress", "userAddress"]}]}
{"case_id": "aave_base_withdraw_eth", "description": "Withdraw ETH assets from Aave on Base network", "steps": [{"description": "Approve aToken spending for AAVE", "to": "<UNKNOWN>", "value": "0", "function_name": "approve", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Withdraw native token (ETH) from Aave", "to": "<UNKNOWN>", "value": "0", "function_name": "withdrawETH", "input_args": ["<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "aave_usdt_eth", "description": "This case represents an AAVE lending and borrowing strategy using USDT as collateral to borrow ETH.", "steps": [{"description": "Approve USDT spending for AAVE if needed", "to": "0xdAC17F958D2ee523a2206206994597C13D831ec7", "value": "0", "function_name": "approve", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "<UNKNOWN>"]}, {"description": "Supply USDT to AAVE as collateral", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "supply", "input_args": ["0xdAC17F958D2ee523a2206206994597C13D831ec7", "<UNKNOWN>", "<UNKNOWN>", "0"]}, {"description": "Disable AAVE E-Mode if enabled", "to": "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "value": "0", "function_name": "setUserEMode", "input_args": ["0"]}, {"description": "Delegate borrowing power on the debt WETH if needed", "to": "0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE", "value": "0", "function_name": "approveDelegation", "input_args": ["0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "<UNKNOWN>"]}, {"description": "Borrow ETH from AAVE", "to": "0x893411580e590D62dDBca8a703d61Cc4A8c7b2b9", "value": "0", "function_name": "borrowETH", "input_args": ["0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2", "<UNKNOWN>", "2", "0"]}]}
{"case_id": "unstake_eth", "description": "A case for unstaking ETH from various staking protocols", "steps": [{"description": "Unstake from Lido", "to": "<UNKNOWN>", "value": "0", "function_name": "lidoUnstakeWSETHTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from RocketPool", "to": "<UNKNOWN>", "value": "0", "function_name": "rocketpoolUnstakeTx", "input_args": ["inputAmount"]}, {"description": "Swap Coinbase staked ETH to ETH using 1inch", "to": "<UNKNOWN>", "value": "0", "function_name": "swapTx", "input_args": ["chainId", "userAddress", "srcTokenAddress", "srcTokenSymbol", "srcTokenDecimals", "srcAmount", "dstTokenAddress", "dstTokenSymbol", "dstTokenDecimals"]}, {"description": "Unstake from StakeWise", "to": "<UNKNOWN>", "value": "0", "function_name": "stakewiseUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from Stader", "to": "<UNKNOWN>", "value": "0", "function_name": "staderUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from EtherFi", "to": "<UNKNOWN>", "value": "0", "function_name": "etherFiUnstakeWEETHTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from Renzo", "to": "<UNKNOWN>", "value": "0", "function_name": "renzoUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from Frax Finance", "to": "<UNKNOWN>", "value": "0", "function_name": "fraxUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from Swell", "to": "<UNKNOWN>", "value": "0", "function_name": "swellUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}, {"description": "Unstake from Redacted Finance", "to": "<UNKNOWN>", "value": "0", "function_name": "dineroUnstakeTxs", "input_args": ["inputAmount", "userAddress"]}]}
{"case_id": "stake_eth", "description": "A case for staking ETH across multiple protocols", "steps": [{"description": "Stake ETH into Lido", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "stakeToLidoGetWSTETHTxs", "input_args": ["chain", "inputAmount"]}, {"description": "Stake ETH into RocketPool", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "rocketpoolStakeTx", "input_args": ["inputAmount"]}, {"description": "Swap ETH for Coinbase staked token", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "swapTx", "input_args": ["chainId", "userAddress", "srcTokenAddress", "srcTokenSymbol", "srcTokenDecimals", "srcAmount", "dstTokenAddress", "dstTokenSymbol", "dstTokenDecimals"]}, {"description": "Stake ETH into StakeWise", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "stakewiseStakeTx", "input_args": ["inputAmount", "userAddress"]}, {"description": "Stake ETH into Stader", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "staderStakeTx", "input_args": ["inputAmount", "userAddress"]}, {"description": "Stake ETH into EtherFi", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "stakeToEtherFiGetWEETHTxs", "input_args": ["chain", "inputAmount"]}, {"description": "Stake ETH into Renzo", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "renzoStakeTx", "input_args": ["inputAmount"]}, {"description": "Stake ETH into Frax Finance", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "fraxStakeTx", "input_args": ["inputAmount", "userAddress"]}, {"description": "Stake ETH into Swell", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "swellStakeTx", "input_args": ["inputAmount"]}, {"description": "Stake ETH into Redacted Finance", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "dineroStakeTx", "input_args": ["inputAmount", "userAddress"]}]}
{"case_id": "zircuit_eigenpie_swell", "description": "A multi-step staking process involving Swell, Eigenpie, and Zircuit protocols to earn various rewards.", "steps": [{"description": "Stake ETH with Swell and receive swETH", "to": "0xf951E335afb289353dc249e82926178EaC7DEd78", "value": "<UNKNOWN>", "function_name": "depositWithReferral", "input_args": ["<UNKNOWN>"]}, {"description": "Approve swETH to be restaked to Eigenlayer on Eigenpie to earn Pearls", "to": "0xf951E335afb289353dc249e82926178EaC7DEd78", "value": "0", "function_name": "approve", "input_args": ["0x24db6717dB1C75B9Db6eA47164D8730B63875dB7", "<UNKNOWN>"]}, {"description": "Stake swETH with Eigenpie and receive mswETH", "to": "0x24db6717dB1C75B9Db6eA47164D8730B63875dB7", "value": "0", "function_name": "depositAsset", "input_args": ["0xf951E335afb289353dc249e82926178EaC7DEd78", "<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Approve mswETH to be restaked on Zircuit to earn Zircuit Points", "to": "0x32bd822d615A3658A68b6fDD30c2fcb2C996D678", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "<UNKNOWN>"]}, {"description": "Restake mswETH with Zircuit to earn Zircuit Points", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0x32bd822d615A3658A68b6fDD30c2fcb2C996D678", "<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "juice_points", "description": "Juice Finance wETH collateral vault interaction", "steps": [{"description": "Wrap ETH to wETH", "to": "0x4300000000000000000000000000000000000004", "value": "<UNKNOWN>", "function_name": "deposit", "input_args": []}, {"description": "Create Account on Juice", "to": "0x23eBa06981B5c2a6f1a985BdCE41BD64D18e6dFA", "value": "0", "function_name": "createAccount", "input_args": []}, {"description": "Approve wETH for Juice", "to": "0x4300000000000000000000000000000000000004", "value": "0", "function_name": "approve", "input_args": ["0x23eBa06981B5c2a6f1a985BdCE41BD64D18e6dFA", "<UNKNOWN>"]}, {"description": "Deposit wETH to Juice", "to": "0x23eBa06981B5c2a6f1a985BdCE41BD64D18e6dFA", "value": "0", "function_name": "deposit", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Borrow 200% wETH from Juice", "to": "<UNKNOWN>", "value": "0", "function_name": "borrow", "input_args": ["<UNKNOWN>"]}, {"description": "Deposit wETH to ezETH Spot Long vault on Juice", "to": "<UNKNOWN>", "value": "0", "function_name": "strategyDeposit", "input_args": ["0x741011f52B7499ca951f8b8Ee547DD3Cdd813Fda", "<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "ether_fi_liquid", "description": "This case represents the EtherFi Liquid Staking protocol for Ethereum. It allows users to stake ETH and receive weETH (wrapped eETH) in return, which can then be deposited into the EtherFi vault.", "steps": [{"description": "Convert ETH to weETH", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "getWEETHTxs", "input_args": ["chain", "inputAmount"]}, {"description": "Approve weETH for EtherFi vault", "to": "<UNKNOWN>", "value": "0", "function_name": "approveAndDepositWEETHToEtherFiVaultTx", "input_args": ["inputAmount", "receiver"]}, {"description": "Deposit weETH into EtherFi vault", "to": "<UNKNOWN>", "value": "0", "function_name": "approveAndDepositWEETHToEtherFiVaultTx", "input_args": ["inputAmount", "receiver"]}]}
{"case_id": "bento_batch_official_nft", "description": "Mint Bento Batch official NFTs on the Optimism network", "steps": [{"description": "Randomly mint a free Bento Batch official NFT", "to": "0xBc1Bb37A522EDB1cAa073ac2B3DEbAcd5E89D81d", "value": "0", "function_name": "randomlyMint", "input_args": []}, {"description": "Randomly mint a Bento Batch official NFT with ETH fee", "to": "0xBc1Bb37A522EDB1cAa073ac2B3DEbAcd5E89D81d", "value": "<UNKNOWN>", "function_name": "randomlyMint", "input_args": []}]}
{"case_id": "lido_multiplier", "description": "A case for Lido multiplier strategy involving Lido staking, wrapping stETH to wstETH, and supplying to AAVE with leveraged borrowing.", "steps": [{"description": "Enable E-Mode on AAVE if not already enabled", "to": "<UNKNOWN>", "value": "0", "function_name": "enableEMode", "input_args": []}, {"description": "Delegate borrowing power", "to": "<UNKNOWN>", "value": "0", "function_name": "delegate", "input_args": ["targetAmount"]}, {"description": "Approve stETH to wstETH conversion", "to": "<UNKNOWN>", "value": "0", "function_name": "approveSTETHToWSTETH", "input_args": ["targetAmount"]}, {"description": "Approve wstETH to AAVE", "to": "<UNKNOWN>", "value": "0", "function_name": "approveWSTETHToAAVE", "input_args": ["targetAmount"]}, {"description": "Stake ETH to Lido", "to": "<UNKNOWN>", "value": "inputAmount", "function_name": "stakeToLido", "input_args": ["inputAmount"]}, {"description": "Wrap stETH to wstETH", "to": "<UNKNOWN>", "value": "0", "function_name": "wrapSTETHToWSTETH", "input_args": ["inputAmount - 1"]}, {"description": "Supply wstETH to AAVE", "to": "<UNKNOWN>", "value": "0", "function_name": "supplyWSTETH", "input_args": ["wstETHAmount", "userAddress"]}, {"description": "Borrow ETH from AAVE", "to": "<UNKNOWN>", "value": "0", "function_name": "borrowETH", "input_args": ["borrowAmount"]}]}
{"case_id": "stone_swell_l2", "description": "This case represents a multi-step process for staking ETH through StakeStone and Swell protocols on the Ethereum mainnet.", "steps": [{"description": "Deposit ETH to StakeStone and receive STONE", "to": "0xa62f9c5af106feee069f38de51098d9d81b90572", "value": "<UNKNOWN>", "function_name": "deposit", "input_args": []}, {"description": "Approve STONE token for Swell L2", "to": "0x7122985656e38BDC0302Db86685bb972b145bD3C", "value": "0", "function_name": "approve", "input_args": ["0x38d43a6cb8da0e855a42fb6b0733a0498531d774", "<UNKNOWN>"]}, {"description": "Stake STONE to Swell L2", "to": "0x38d43a6cb8da0e855a42fb6b0733a0498531d774", "value": "0", "function_name": "deposit", "input_args": ["0x7122985656e38BDC0302Db86685bb972b145bD3C", "<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "scroll_stone", "description": "Stake ETH on Scroll network using Izumi and Tranchess protocols", "steps": [{"description": "Swap ETH to STONE on Izumi", "to": "0x2db0AFD0045F3518c77eC6591a542e326Befd3D7", "value": "<UNKNOWN>", "function_name": "multicall", "input_args": ["[firstCall, secondCall]"]}, {"description": "Approve STONE for Tranchess if needed", "to": "<UNKNOWN>", "value": "0", "function_name": "approve", "input_args": ["0x194c6AcC13E7ecDCb6fc767359291A6fEE179440", "<UNKNOWN>"]}, {"description": "Swap STONE to stoneQUEEN on Tranchess", "to": "0x194c6AcC13E7ecDCb6fc767359291A6fEE179440", "value": "0", "function_name": "create", "input_args": ["<UNKNOWN>", "<UNKNOWN>", "<UNKNOWN>", "0"]}, {"description": "Split stoneQUEEN into staYSTONE and turPSTONE on Tranchess", "to": "0x21366dE9707A1044e351280f085821C734791cee", "value": "0", "function_name": "split", "input_args": ["<UNKNOWN>", "<UNKNOWN>", "0"]}]}
{"case_id": "compound_supply_arbitrum", "description": "Supply assets to Compound on Arbitrum", "steps": [{"description": "Approve ERC20 token for Compound", "to": "<UNKNOWN>", "value": "0", "function_name": "approve", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Supply ERC20 token to Compound", "to": "<UNKNOWN>", "value": "0", "function_name": "supply", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "compound_withdraw_multi_chain", "description": "A multi-chain case for withdrawing assets from Compound protocol on various networks including Arbitrum, Base, Mainnet, Optimism, Polygon, and Scroll.", "steps": [{"description": "Withdraw ERC20 token from Compound", "to": "<UNKNOWN>", "value": "0", "function_name": "withdrawERC20Token", "input_args": ["cometAddr", "tokenAddr", "withdrawAmount", "tokenSymbol", "tokenDecimals"]}, {"description": "Withdraw WETH and unwrap to native ETH", "to": "<UNKNOWN>", "value": "0", "function_name": "withdrawWETH", "input_args": ["wETHAddr", "inputAmount"]}]}
{"case_id": "zora_most_minted", "description": "This case represents a batch minting of two NFTs on the Zora network: \"11:11\" and \"It's a feeling.\" Users can specify how many times they want to mint these two NFTs.", "steps": [{"description": "Mint '11:11' NFT", "to": "0x04E2516A2c207E84a1839755675dfd8eF6302F0a", "value": "0.000777", "function_name": "mint", "input_args": ["0x051580e8a6da31c4bb48d02f3c22f1e99080b0f3", "3", "<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Mint 'It's a feeling.' NFT", "to": "0x04E2516A2c207E84a1839755675dfd8eF6302F0a", "value": "0.000777", "function_name": "mint", "input_args": ["0x0bd0e83cbb9fb191daef14702a8c9fc3575a6ea8", "1", "<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "zircuit_etherfi", "description": "This case represents a series of transactions for staking ETH through Etherfi and Zircuit protocols.", "steps": [{"description": "Stake ETH to eETH", "to": "0x308861A430be4cce5502d0A12724771Fc6DaF216", "value": "<UNKNOWN>", "function_name": "deposit", "input_args": ["0x80011844928B469EAc5E4bC7e6EBA9b3C2Fa1b41"]}, {"description": "Approve eETH for wrapping as weETH", "to": "0x35fA164735182de50811E8e2E824cFb9B6118ac2", "value": "0", "function_name": "approve", "input_args": ["0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "<UNKNOWN>"]}, {"description": "Wrap eETH to weETH", "to": "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "value": "0", "function_name": "wrap", "input_args": ["<UNKNOWN>"]}, {"description": "Approve weETH to Zircuit", "to": "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "<UNKNOWN>"]}, {"description": "Stake weETH to Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee", "<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "zircuit_ethena_usdc", "description": "This case involves swapping USDC for USDe using Curve, and then staking the USDe in Zircuit's restaking pool.", "steps": [{"description": "Approve USDC for Curve", "to": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48", "value": "0", "function_name": "approve", "input_args": ["0x02950460E2b9529D0E00284A5fA2d7bDF3fA4d72", "<UNKNOWN>"]}, {"description": "Swap USDC to USDe using Curve", "to": "0x02950460E2b9529D0E00284A5fA2d7bDF3fA4d72", "value": "0", "function_name": "exchange", "input_args": ["1", "0", "<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Approve USDe for Zircuit", "to": "0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "<UNKNOWN>"]}, {"description": "Stake USDe in Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "<UNKNOWN>", "<UNKNOWN>"]}]}
{"case_id": "zircuit_ethena_usdt", "description": "This case involves swapping USDT for USDe using Uniswap, and then staking the USDe in Zircuit's restaking pool.", "steps": [{"description": "Approve USDT for Uniswap", "to": "0xdAC17F958D2ee523a2206206994597C13D831ec7", "value": "0", "function_name": "approve", "input_args": ["0xE592427A0AEce92De3Edee1F18E0157C05861564", "<USDT_AMOUNT>"]}, {"description": "Swap USDT to USDe using Uniswap", "to": "0xE592427A0AEce92De3Edee1F18E0157C05861564", "value": "0", "function_name": "exactInputSingle", "input_args": ["[\"0xdAC17F958D2ee523a2206206994597C13D831ec7\", \"0x4c9edd5852cd905f086c759e8383e09bff1e68b3\", \"100\", \"<USER_ADDRESS>\", \"<DEADLINE>\", \"<USDT_AMOUNT>\", \"<USDE_AMOUNT>\", \"0\"]"]}, {"description": "Approve USDe for Zircuit", "to": "0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "value": "0", "function_name": "approve", "input_args": ["0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "<USDE_AMOUNT>"]}, {"description": "Stake USDe in Zircuit", "to": "0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6", "value": "0", "function_name": "depositFor", "input_args": ["0x4c9edd5852cd905f086c759e8383e09bff1e68b3", "<USER_ADDRESS>", "<USDE_AMOUNT>"]}]}
{"case_id": "genesis_liquidity", "description": "This case represents a complex DeFi operation involving staking ETH with Genesis and Lido, wrapping tokens, and providing liquidity to a Uniswap V3 pool.", "steps": [{"description": "Stake ETH and receive genETH on Genesis", "to": "0x46199caa0e453971cedf97f926368d9e5415831a", "value": "<UNKNOWN>", "function_name": "stake", "input_args": ["<UNKNOWN>"]}, {"description": "Approve genETH to be added to the UniswapV3 liquidity pool", "to": "0xf073bAC22DAb7FaF4a3Dd6c6189a70D54110525C", "value": "0", "function_name": "approve", "input_args": ["0xc36442b4a4522e871399cd717abdd847ab11fe88", "<UNKNOWN>"]}, {"description": "Stake ETH and receive stETH on Lido", "to": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84", "value": "<UNKNOWN>", "function_name": "submit", "input_args": ["0x80011844928B469EAc5E4bC7e6EBA9b3C2Fa1b41"]}, {"description": "Approve stETH to be wrapped", "to": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84", "value": "0", "function_name": "approve", "input_args": ["0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0", "<UNKNOWN>"]}, {"description": "Wrap stETH to wstETH", "to": "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0", "value": "0", "function_name": "wrap", "input_args": ["<UNKNOWN>"]}, {"description": "Approve wstETH to be added to the UniswapV3 liquidity pool", "to": "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0", "value": "0", "function_name": "approve", "input_args": ["0xc36442b4a4522e871399cd717abdd847ab11fe88", "<UNKNOWN>"]}, {"description": "Add wstETH and genETH to the UniswapV3 liquidity pool", "to": "0xc36442b4a4522e871399cd717abdd847ab11fe88", "value": "0", "function_name": "mint", "input_args": ["<UNKNOWN>"]}]}
{"case_id": "pencils_deposit", "description": "This case represents a deposit operation in the Pencils Protocol on the Scroll network. It involves swapping ETH for STONE tokens, approving the STONE tokens for use by the Pencils Protocol, and then depositing the STONE tokens into the protocol.", "steps": [{"description": "Swap ETH for STONE tokens", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "swapTx", "input_args": ["chain", "baseAddr", "baseSymbol", "baseDecimals", "baseAmount", "quoteAddr", "quoteSymbol", "quoteDecimals"]}, {"description": "Approve STONE tokens for use by Pencils Protocol (if needed)", "to": "0x80137510979822322193FC997d400D5A6C747bf7", "value": "0", "function_name": "approveERC20TxIfNeeded", "input_args": ["chain", "userAddress", "tokenAddress", "tokenSymbol", "tokenDecimals", "spenderAddress", "spenderName", "amount"]}, {"description": "Deposit STONE tokens into Pencils Protocol", "to": "0x20DE0435e5674Ef15E78adA570159984524B9E8F", "value": "0", "function_name": "depositTx", "input_args": ["pTokenAddr", "tokenSymbol", "tokenDecimals", "tokenAmount"]}]}
{"case_id": "scroll_puffer_pencils", "description": "This case represents a series of transactions on the Scroll network to swap ETH for PufETH, approve PufETH for spending, and deposit PufETH into Pencils Protocol.", "steps": [{"description": "Swap ETH for PufETH", "to": "<UNKNOWN>", "value": "<UNKNOWN>", "function_name": "swap", "input_args": ["ETH", "PufETH"]}, {"description": "Approve PufETH for spending by Pencils Protocol", "to": "0xc4d46E8402F476F269c379677C99F18E22Ea030e", "value": "0", "function_name": "approve", "input_args": ["0x0C530882C0900b13FC6E8312B52c26e7a5b8e505", "<UNKNOWN>"]}, {"description": "Deposit PufETH into Pencils Protocol vault", "to": "0x0C530882C0900b13FC6E8312B52c26e7a5b8e505", "value": "0", "function_name": "deposit", "input_args": ["<UNKNOWN>"]}]}
{"case_id": "multi_sender", "description": "A multi-sender case for transferring USDT tokens to multiple recipients on the Polygon network.", "steps": [{"description": "Transfer USDT to recipient", "to": "0xc2132D05D31c914a87C6611C10748AEb04B58e8F", "value": "0", "function_name": "transfer", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Transfer USDT to recipient", "to": "0xc2132D05D31c914a87C6611C10748AEb04B58e8F", "value": "0", "function_name": "transfer", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}, {"description": "Transfer USDT to recipient", "to": "0xc2132D05D31c914a87C6611C10748AEb04B58e8F", "value": "0", "function_name": "transfer", "input_args": ["<UNKNOWN>", "<UNKNOWN>"]}]}
